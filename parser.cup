/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import java.util.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.*;
import type.*;
import symbolTable.*;  

parser code {:
  protected Lexer lexer;
  public static int errors = 0;
  public static StringBuffer code = new StringBuffer();

  public void report_error(String message, Object info){
    if (info instanceof String){
	  errors++;
      System.err.println("  "+ errors + "==> " + info + " "+ message +
							"near " + lexer.current_lexeme());
    } else {
      StringBuffer m = new StringBuffer("Error ");
      if (info instanceof java_cup.runtime.Symbol){
        m.append( "("+info.toString()+")" );
        m.append(" : "+message);
        System.err.println(m);
      }
    }
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

  public void checkEqualTypes(Type t1, Type t2){
    if (t1.equals(t2)){return;}
    report_error("Incompatible types. ", "ERROR");
  }

  public void checkCompatibleTypes(Type t1, Type t2){
    if (t1.equals(t2)){return;}
    if (t1.getVal().equals("integer") && t2.getVal().equals("real")){return;}
    if (t2.getVal().equals("integer") && t1.getVal().equals("real")){return;}
    report_error("Incompatible types ", "ERROR");
  }

  public String assemblyOperation(String op){
    if(op.equals("-")) {
	  return "SUB";
	}
	else if(op.equals("+")) {
	  return "ADD";
	}
	else if(op.equals("*")) {
	  return "MUL";
	} else if(op.equals("and")) {
	  return "AND";
	} else if(op.equals("OR")) {
	  return "OR";
	} else if(op.equals("XOR")) {
	  return "XOR";
	}

	else if(op.equals("/") || op.toLowerCase().equals("div")) {
	  return "DIV";
	}
    return "";
  }

  public Type checkRelationalExp(Type e1, Type e2, String op){
    if (op.equals("<>")){
      if (!(e1.equals(e2))){
        report_error("Incompatible types", "ERROR");
      }
    } else {
      checkCompatibleTypes(e1, e2);
    }
    return Type.getType("boolean");
  }
:}

action code {:
  class Exp {
    public Type type;
    public String code;
    public boolean isConstant;

    Exp(Type t, String code) {
      this(t, code, false);
    }

    Exp(Type t, String code, boolean cte) {
      type = t;
      this.code = code;
      isConstant = cte;
    }
  }
:};

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
  Type.buildTypes();
  SymbolTable.initialize();
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, DIVIDE, TIMES, LPAREN, RPAREN, MOD;
terminal Integer    INTEGER_LITERAL;
terminal Float      FLOAT_LITERAL;
terminal Boolean    BOOLEAN_LITERAL;
terminal String     STRING_LITERAL;
terminal            VAR, COLON, COMMA, CONST, TYPE;
terminal            GT, LT, LE, GE, DIFF, NOT, AND, OR, XOR;
terminal            BOOL, INT, STRING, REAL;
terminal            EQUAL, FULLSTOP;
terminal String     IDENTIFIER;
terminal            NEWLINE, PROGRAM, BEGIN, END, PROCEDURE, FUNCTION;
terminal            FOR, TO, DOWNTO, DO;

/* Non terminals */
non terminal              initial, program_def_part, body_def_part, program_def, header_declarations, type_def_part;
non terminal              function_def_part, function_body, function_declaration; 
non terminal              procedure_def_part, procedure_declaration, procedure_body;
non terminal              parameter, parameters, parameters_list, set_items, set_item;
non terminal              block, block_end, call, args;
non terminal              stmt_def_part, stmt_def_list, stmt;
non terminal              exp_list, literal;
non terminal              exp, rel_op, bool_op, log_op, bin_arim_op, un_arim_op;
non terminal              exp_part, final_value;
non terminal              variable_def, variable_def_list, variable_def_part, variable_opt_nl;
non terminal              const_def, const_def_list, const_def_part;
non terminal List<String> identifier_list;
non terminal String   	  identifier, for_stmt;
non terminal              type_def, control_variable, for_def_part, initial_value, direction, for_designator;
non terminal              attr, assign_operator, equal_op, sum_op, minus_op, times_op, divide_op, only_equal_op;
/* Precedences */ 
precedence left FOR;	// Inserted by Eclipse plugin
precedence nonassoc IDENTIFIER;	// Inserted by Eclipse plugin
precedence nonassoc NOT;	// Inserted by Eclipse plugin
precedence nonassoc BOOLEAN_LITERAL;	// Inserted by Eclipse plugin
precedence nonassoc FLOAT_LITERAL;	// Inserted by Eclipse plugin
precedence nonassoc INTEGER_LITERAL;	// Inserted by Eclipse plugin
precedence nonassoc LPAREN;	// Inserted by Eclipse plugin
precedence nonassoc IDENTIFIER;	// Inserted by Eclipse plugin
precedence nonassoc VAR;	// Inserted by Eclipse plugin
precedence nonassoc VAR;	// Inserted by Eclipse plugin
precedence nonassoc PROCEDURE;	// Inserted by Eclipse plugin
precedence nonassoc FUNCTION;	// Inserted by Eclipse plugin
precedence nonassoc error;	// Inserted by Eclipse plugin
precedence nonassoc SEMI;	// Inserted by Eclipse plugin
precedence nonassoc MOD;	// Inserted by Eclipse plugin
precedence nonassoc XOR;	// Inserted by Eclipse plugin
precedence nonassoc OR;	// Inserted by Eclipse plugin
precedence nonassoc AND;	// Inserted by Eclipse plugin
precedence nonassoc DIFF;	// Inserted by Eclipse plugin
precedence nonassoc GE;	// Inserted by Eclipse plugin
precedence nonassoc LE;	// Inserted by Eclipse plugin
precedence nonassoc LE;	// Inserted by Eclipse plugin
precedence nonassoc LT;	// Inserted by Eclipse plugin
precedence nonassoc GT;	// Inserted by Eclipse plugin
precedence nonassoc NEWLINE;	// Inserted by Eclipse plugin
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIVIDE;

start with initial;
/* The grammar rules */

initial ::= program_def_part program_def {:
	parser.code.append("\t HALT \n\n");
:};
program_def ::= type_def_part variable_def_part header_declarations body_def_part;
program_def ::=  variable_def_part body_def_part;

program_def_part ::= PROGRAM identifier:id SEMI{:
	parser.code.append("; Codigo assembly simples para "+id+".\n"); 
	parser.code.append("; Os registradores R0...Rn sao argumentos de funcoes/procedimentos.\n");
	parser.code.append("; O registrador V0 guarda retorno de funcoes.\n");
	parser.code.append("; O registrador SP sala a pilha de execucao.\n\n"); 
	parser.code.append("\t LD SP , #stackStart\n"); 
	parser.code.append("\t BR main \n"); 
:};

type_def_part ::= TYPE identifier assign_operator LPAREN set_items RPAREN SEMI;
set_items ::= set_items COMMA set_item;
set_items ::= set_item;
set_item ::= identifier;

body_def_part ::= BEGIN  {:
	parser.code.append("main: \n");
:} stmt_def_part END FULLSTOP;
body_def_part ::=  {:
	parser.code.append("main: \n");
:} stmt_def_part END FULLSTOP;

stmt_def_part ::= stmt_def_list | ;
stmt_def_list ::= stmt_def_list stmt;
stmt_def_list ::= stmt;
stmt ::= attr;
stmt ::= for_def_part;
stmt ::= call;


for_designator ::= FOR control_variable:cv equal_op initial_value:iv direction final_value:fv {:
	SymbolImpl symbolTableCV = SymbolTable.get(cv.toString());
	if (symbolTableCV == null) {
		parser.report_error("Undeclared variable ", "ERROR");
	}
	Exp exIV = (Exp)iv;
	Exp exFV = (Exp)fv;
	parser.checkEqualTypes(exIV.type, Type.getType("integer"));
	parser.checkEqualTypes(exFV.type, Type.getType("integer"));
	parser.checkEqualTypes(symbolTableCV.getType(), Type.getType("integer"));
:};
control_variable ::= identifier:id {:
	RESULT = id.toString();
:};
initial_value ::= exp_part:e {:
	Exp exp = (Exp)e;
	RESULT = exp;
:};
direction ::= TO | DOWNTO;
final_value ::= exp_part:e {:
	Exp exp = (Exp)e;
	RESULT = exp;
:};

for_def_part ::= for_designator DO for_stmt ;
for_stmt ::= block stmt_def_part block_end;
for_stmt ::= stmt_def_part;
for_def_part ::= error {:parser.report_error("Error in for definition ", "ERROR"); :};

identifier ::= IDENTIFIER:x {:
	RESULT = x;
:};


header_declarations ::= header_declarations procedure_def_part;
header_declarations ::= header_declarations function_def_part;

block ::= BEGIN;
block_end ::= END SEMI;

procedure_def_part ::= procedure_declaration variable_def_part procedure_body;
procedure_declaration ::= PROCEDURE identifier:id parameters_list:pl SEMI {:
	ProcedureType p = new ProcedureType();
	List<Type> l = (List<Type>)pl; 
	p.addParams(l);
	if (! SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, p))){
		parser.report_error("Duplicate name ", "ERROR");
	}
:};
procedure_body ::= block stmt_def_part block_end;

function_def_part ::= function_declaration variable_def_part function_body;
function_declaration ::= FUNCTION identifier:id parameters_list:pl COLON type_def:td SEMI{:
	Type returnType = (Type)td;
	FunctionType p = new FunctionType(returnType);
	List<Type> l = (List<Type>)pl; 
	p.addParams(l);
	if (! SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, p))){
		parser.report_error("Duplicate name ", "ERROR");
	}
:};
function_body ::= block stmt_def_part block_end;

parameters_list ::= LPAREN parameters:p RPAREN {:
	RESULT = p;
:};
parameters_list ::= ;
parameter ::= identifier_list:il COLON type_def:t {:
	List<Type> params = new ArrayList();
	for (String i: il){
		params.add((Type)t);
		if(! SymbolTable.insert(i.toLowerCase(), new SymbolImpl(i, (Type)t))){
			parser.report_error("Duplicate name ", "ERROR");
		}
	}
    RESULT = params;
:};
parameters ::= parameter:p SEMI parameters:pl {:
	List<Type> aux = (List)pl;
	aux.addAll((List<Type>)p);
	RESULT = aux;
:};
parameters ::= parameter:p {:
	RESULT = p;
:};

call ::= identifier:id LPAREN args:al RPAREN SEMI {:
	SymbolImpl s = SymbolTable.get(id);	
	if (s == null) {
		parser.report_error("Undeclared function ", "ERROR");
	}
	List<Exp> arg_list = (List<Exp>)al;
	FunctionType f = (FunctionType)s.getType();
	for (int i=0; i < f.parameters.size(); i++){
		if (f.parameters.get(i) != arg_list.get(i).type){
			parser.report_error("Invalid parameter ", "ERROR");
		}
	}
	RESULT = f;
:};
args ::= exp:ex {:
	List<Exp> a = new ArrayList();
	Exp e = (Exp)ex;
	a.add(e);
	RESULT = a;
:};
args ::= args:a COMMA exp:ex {:
	Exp e = (Exp)ex;
	List<Exp> arg_list = (List<Exp>)a;
	arg_list.add(e);
	RESULT = arg_list;
:};

exp_part ::= exp:ex {:
	Exp e = (Exp)ex;
	RESULT = new Exp(e.type, e.code);
:};
exp ::= literal:l {:
	Exp e;
    if (l instanceof Integer) {
		e = new Exp(Type.getType("integer"), String.valueOf(l));
	} else if (l instanceof Float){
		e = new Exp(Type.getType("real"), String.valueOf(l));
	} else if (l instanceof String) {
		e = new Exp(Type.getType("string"), String.valueOf(l));
	} else if (l instanceof Boolean) {
		e = new Exp(Type.getType("boolean"), String.valueOf(l));
	} else {
		parser.report_error("Unknown data type ", "ERROR");
		e = null;
	}
	RESULT = e;
:};
exp ::= identifier:id {:
	parser.code.append("\t LD R2, "+id+"\n"); // change register in every id
	RESULT = new Exp(SymbolTable.get(id).getType(), "R2");
:};
exp ::= exp error {: parser.report_error("Missing operand ", "ERROR"); :};
exp ::= bool_op:op exp:e1 {:
	Exp ex1 = (Exp)e1;
	parser.checkCompatibleTypes(ex1.type, Type.getType("boolean"));
	parser.code.append("\t NOT R1, "+ex1.code+"\n");
	RESULT = new Exp(Type.getType("boolean"), "R1");
:};
exp ::= exp:e1 log_op:op exp:e2{:
	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	parser.checkCompatibleTypes(ex1.type, Type.getType("boolean"));
	parser.checkCompatibleTypes(ex2.type, Type.getType("boolean"));
	parser.code.append("\t "+parser.assemblyOperation(op.toString())+" R1, "+ex1.code+", "+ex2.code+"\n");
	RESULT = new Exp(Type.getType("boolean"), "R1");
:};
exp ::= un_arim_op:op exp:e1 {:
	Exp ex1 = (Exp)e1;
	parser.checkCompatibleTypes(ex1.type, Type.getType("integer"));
	parser.code.append("\t "+parser.assemblyOperation(op.toString())+" R1, "+ex1.code+", 0\n");
	RESULT = new Exp(ex1.type, "R1");
:};
exp ::= exp:e1 bin_arim_op:op exp:e2 {:
	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	parser.checkCompatibleTypes(ex1.type, ex2.type);
	parser.code.append("\t "+parser.assemblyOperation(op.toString())+" R1, "+ex1.code+", "+ex2.code+"\n");

	RESULT = new Exp(Type.max(ex1.type, ex2.type), "R1");
:};
exp ::= exp:e1 rel_op:op exp:e2 {:
	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	parser.code.append("\t "+parser.assemblyOperation(op.toString())+" R1, "+ex1.code+", "+ex2.code+"\n");
	RESULT = new Exp(parser.checkRelationalExp(ex1.type, ex2.type, (String)op), ex1.code + (String)op + ex2.code);
:};

exp ::= LPAREN exp:ex RPAREN {:
	Exp e = (Exp)ex;
	RESULT = new Exp(e.type, e.code);
:};

literal ::= INTEGER_LITERAL:il {:
	RESULT = il;
:};

literal ::= BOOLEAN_LITERAL:bl {:
	RESULT = bl;
:};
literal ::= STRING_LITERAL:sl {:
	RESULT = sl;
:};

rel_op ::= GT {:
    RESULT = ">";
:};
rel_op ::= LT {:
    RESULT = "<";
:};
rel_op ::= GE {:
    RESULT = ">=";
:};
rel_op ::= LE {:
    RESULT = "<=";
:};
rel_op ::= DIFF {:
    RESULT = "<>";
:};

bool_op ::= NOT{:
    RESULT = "not";
:};

log_op ::= AND {:
    RESULT = "and";
:};
log_op ::= XOR{:
    RESULT = "xor";
:};
log_op ::= OR{:
    RESULT = "or";
:};

bin_arim_op ::= PLUS {:
    RESULT = "+";
:};
bin_arim_op ::= MINUS {:
    RESULT = "-";
:};
bin_arim_op ::= TIMES {:
    RESULT = "*";
:};
bin_arim_op ::= DIVIDE {:
    RESULT = "/";
:};
bin_arim_op ::= MOD {:
    RESULT = "mod";
:};

un_arim_op ::= PLUS{:
	RESULT = "+";
:};
un_arim_op ::= MINUS{:
	RESULT = "-";
:};


variable_def_part ::= VAR variable_def_list ;
variable_def_list ::= variable_def_list variable_def | variable_def;
variable_def ::= identifier_list:il COLON type_def:td SEMI {:
	for (String id: il){
		if(!SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, (Type)td))) {
	        parser.report_error("Duplicated variable ", id);
	    }
	}
:};
variable_def ::= error {: parser.report_error("","expected ';' before token"); :} SEMI;

attr ::= identifier:id assign_operator exp_part:ex SEMI{:
	Exp e = (Exp)ex;
    parser.checkCompatibleTypes(SymbolTable.get(id).getType(), e.type);
	parser.code.append("\t ST "+id+", "+e.code+"\n");
:};
attr ::= identifier:id assign_operator call:c {:
	SymbolImpl s = SymbolTable.get(id.toLowerCase());
	if (s == null) {
		parser.report_error("Undeclared variable ", "ERROR");
	}
	FunctionType f = (FunctionType)c;
	parser.checkCompatibleTypes(s.getType(), f.returnType);
	
:};
attr ::= identifier assign_operator error {: 
	parser.report_error("Error in expression ", "ERROR"); 
:};

assign_operator ::= error {: parser.report_error("Expected symbol before = ", "ERROR"); :};

assign_operator ::= equal_op;
assign_operator ::= sum_op;
assign_operator ::= minus_op;
assign_operator ::= times_op;
assign_operator ::= divide_op;
assign_operator ::= only_equal_op;

equal_op ::= COLON EQUAL;
sum_op  ::= PLUS EQUAL;
minus_op  ::= MINUS EQUAL;
times_op ::= TIMES EQUAL;
divide_op ::= DIVIDE EQUAL;
only_equal_op ::= EQUAL;

identifier_list ::= identifier_list:il COMMA identifier:id {:
	il.add(id.toLowerCase());
	RESULT = il;
:};
identifier_list ::= identifier:id {:
	List<String> il = new ArrayList<String>();
   	il.add(id.toLowerCase());
   	RESULT = il;
:};

type_def ::= STRING {:
	RESULT = Type.getType("string");
:};
type_def ::= BOOL{:
	RESULT = Type.getType("boolean");
:};
type_def ::= INT {:
	RESULT = Type.getType("integer");
:};
type_def ::= REAL {:
	RESULT = Type.getType("real");
:};

// ~~ CUP-ECLIPSE:CONFLICT-RES-RR ~~ 
 // After this the order of productions matters

//Moved by CUP Eclipse plugin
header_declarations ::= ;

//Moved by CUP Eclipse plugin
variable_def_part ::= ;

//Moved by CUP Eclipse plugin
literal ::= FLOAT_LITERAL:rl {:
	RESULT = rl;
:};

//Moved by CUP Eclipse plugin
literal ::= FLOAT_LITERAL:fl {:
	RESULT = fl;
:};
