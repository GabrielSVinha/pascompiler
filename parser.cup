/*
   Simple +/-/* expression language; 
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import java.util.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}

/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, DIVIDE, TIMES, LPAREN, RPAREN, MOD;
terminal Integer    NUMBER;        // our scanner provides numbers as integersterminal			VAR;4
terminal			VAR, COLON, COMMA, CONST;
terminal            GT, LT, LE, GE, DIFF, NOT, AND, OR, XOR;
terminal			BOOL, INT, CHAR;
terminal			EQUAL, FULLSTOP;
terminal String     IDENTIFIER;
terminal			NEWLINE, PROGRAM, BEGIN, END, PROCEDURE, FUNCTION;

/* Non terminals */
non terminal              initial, program_def_part, body_def_part;
non terminal			  procedureOrFunctionDeclaration, procedureDeclaration, functionDeclaration, parametersList;
non terminal 			  block;
non terminal              stmt_def_part, stmt_def_list, stmt;
non terminal              exp_list, literal;
non terminal 		      exp, rel_op, bool_op, log_op, bin_arim_op, un_arim_op;
non terminal			  exp_part;
non terminal			  variable_def, variable_def_list, variable_def_part, variable_opt_nl;
non terminal              const_def, const_def_list, const_def_part;
non terminal List<String> identifier_list;
non terminal String   	  identifier;
non terminal			  type_def;
non terminal		      attr, assign_operator, equal_op, sum_op, minus_op, times_op, divide_op;
/* Precedences */ 
precedence nonassoc MOD;	// Inserted by Eclipse plugin
precedence nonassoc XOR;	// Inserted by Eclipse plugin
precedence nonassoc OR;	// Inserted by Eclipse plugin
precedence nonassoc AND;	// Inserted by Eclipse plugin
precedence nonassoc DIFF;	// Inserted by Eclipse plugin
precedence nonassoc GE;	// Inserted by Eclipse plugin
precedence nonassoc LE;	// Inserted by Eclipse plugin
precedence nonassoc LE;	// Inserted by Eclipse plugin
precedence nonassoc LT;	// Inserted by Eclipse plugin
precedence nonassoc GT;	// Inserted by Eclipse plugin
precedence nonassoc VAR;	// Inserted by Eclipse plugin
precedence nonassoc NEWLINE;	// Inserted by Eclipse plugin
precedence left PLUS, MINUS;
precedence left TIMES;
precedence left DIVIDE;

start with initial;
/* The grammar rules */

initial ::= program_def_part variable_def_part body_def_part;

program_def_part ::= PROGRAM identifier SEMI;

body_def_part ::= BEGIN stmt_def_part END FULLSTOP;
body_def_part ::= stmt_def_part END FULLSTOP;

stmt_def_part ::= stmt_def_list | ;
stmt_def_list ::= stmt_def_list stmt;
stmt_def_list ::= stmt;
stmt_def_list ::= NEWLINE stmt_def_list;
stmt ::= attr SEMI;


const_def_part ::= CONST const_def_list;
const_def_list ::= const_def_list const_def; 
const_def_list ::= const_def;
const_def ::= identifier_list COLON type_def EQUAL exp_list; //ADD LITERAL

identifier ::= IDENTIFIER:x;

// Define a non FULL STOP block, functions and procedures. #WIP
block ::= BEGIN SEMI;
procedureOrFunctionDeclaration ::= procedureDeclaration | functionDeclaration;
procedureDeclaration ::= PROCEDURE identifier parametersList SEMI block;
functionDeclaration ::= FUNCTION identifier;
parametersList ::= LPAREN RPAREN | ; // TODO: Complete here between L and R PAREN.

exp_list ::= exp_part;
exp_part ::= exp_part exp; 
exp_part ::= exp;
exp ::= bool_op exp;
exp ::= exp log_op exp;
exp ::= un_arim_op exp;
exp ::= exp bin_arim_op exp;
exp ::= exp rel_op exp;
exp ::= LPAREN exp RPAREN;
exp ::= literal;
exp ::= identifier;

literal ::= NUMBER;

rel_op ::= GT;
rel_op ::= LT;
rel_op ::= GE;
rel_op ::= LE;
rel_op ::= DIFF;

bool_op ::= NOT;

log_op ::= AND;
log_op ::= XOR;
log_op ::= OR;

bin_arim_op ::= PLUS;
bin_arim_op ::= MINUS;
bin_arim_op ::= TIMES;
bin_arim_op ::= DIVIDE;
bin_arim_op ::= MOD;

un_arim_op ::= PLUS;
un_arim_op ::= MINUS;

variable_def_part ::= VAR variable_def_list | ;
variable_def_list ::= variable_def_list variable_def;
variable_def_list ::= NEWLINE variable_def_list;
variable_def_list ::= variable_def;
variable_def ::= identifier_list COLON type_def SEMI;

attr ::= identifier assign_operator exp_list;

assign_operator ::= equal_op;
assign_operator ::= sum_op;
assign_operator ::= minus_op;
assign_operator ::= times_op;
assign_operator ::= divide_op; 

equal_op ::= COLON EQUAL;
sum_op  ::= PLUS EQUAL;
minus_op  ::= MINUS EQUAL;
times_op ::= TIMES EQUAL;
divide_op ::= DIVIDE EQUAL;

identifier_list ::= identifier_list COMMA identifier; 
identifier_list ::= identifier;

type_def ::= CHAR;
type_def ::= BOOL;
type_def ::= INT;
