
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import java.util.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\004\000\002\005" +
    "\005\000\002\005\005\000\002\003\005\000\002\004\006" +
    "\000\002\004\005\000\002\024\003\000\002\024\002\000" +
    "\002\025\004\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\060\010\000\002\054" +
    "\003\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\051\003\000\002\055\005\000\002\052\005\000" +
    "\002\052\003\000\002\055\003\000\002\046\004\000\002" +
    "\045\004\000\002\045\003\000\002\044\007\000\002\050" +
    "\003\000\002\006\004\000\002\006\004\000\002\020\003" +
    "\000\002\021\004\000\002\012\004\000\002\013\006\000" +
    "\002\014\005\000\002\007\004\000\002\011\010\000\002" +
    "\010\005\000\002\017\005\000\002\015\005\000\002\016" +
    "\005\000\002\016\003\000\002\022\007\000\002\023\003" +
    "\000\002\023\005\000\002\027\003\000\002\037\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\004\000\002" +
    "\031\004\000\002\031\005\000\002\031\004\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\036\003\000\002\036\003\000\002\042\004\000\002" +
    "\041\004\000\002\041\004\000\002\041\003\000\002\040" +
    "\006\000\002\061\006\000\002\061\005\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\063\004\000\002" +
    "\064\004\000\002\065\004\000\002\066\004\000\002\067" +
    "\004\000\002\047\005\000\002\047\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\006\002\000" +
    "\002\042\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\043\006\001\002\000\004\002\243\001" +
    "\002\000\022\003\uff9e\017\012\041\uff9e\044\uff9e\045\uff9e" +
    "\046\uff9e\047\uff9e\050\uff9e\001\002\000\004\041\010\001" +
    "\002\000\004\004\011\001\002\000\056\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\020\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\031\uffe5\032\uffe5\033\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\001\002\000\022\003\ufffd\017\ufffd\041\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\050\ufffd\001\002\000\006\041" +
    "\010\042\235\001\002\000\022\003\uff9d\017\012\041\uff9d" +
    "\044\uff9d\045\uff9d\046\017\047\024\050\uff9d\001\002\000" +
    "\020\003\uff9e\041\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e" +
    "\050\uff9e\001\002\000\004\002\000\001\002\000\020\003" +
    "\031\041\010\044\026\045\ufff9\046\017\047\024\050\036" +
    "\001\002\000\004\041\010\001\002\000\004\045\223\001" +
    "\002\000\022\003\uffe3\017\uffe3\041\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\047\uffe3\050\uffe3\001\002\000\020\003\201\005" +
    "\177\006\172\007\175\010\202\011\205\020\053\001\002" +
    "\000\012\003\031\041\010\045\ufffa\050\036\001\002\000" +
    "\004\041\010\001\002\000\004\044\041\001\002\000\012" +
    "\003\031\041\010\045\ufff9\050\036\001\002\000\004\002" +
    "\uffff\001\002\000\012\003\ufff5\041\ufff5\045\ufff5\050\ufff5" +
    "\001\002\000\012\003\uffea\041\uffea\045\uffea\050\uffea\001" +
    "\002\000\022\003\uffe4\017\uffe4\041\uffe4\044\uffe4\045\uffe4" +
    "\046\uffe4\047\uffe4\050\uffe4\001\002\000\012\003\ufff6\041" +
    "\ufff6\045\ufff6\050\ufff6\001\002\000\012\003\ufff4\041\ufff4" +
    "\045\ufff4\050\ufff4\001\002\000\004\053\130\001\002\000" +
    "\004\041\010\001\002\000\004\044\041\001\002\000\012" +
    "\003\ufff7\041\ufff7\045\ufff7\050\ufff7\001\002\000\012\003" +
    "\uffe2\041\uffe2\045\uffe2\050\uffe2\001\002\000\022\003\uffe0" +
    "\017\uffe0\041\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0\050" +
    "\uffe0\001\002\000\012\003\031\041\010\045\ufff9\050\036" +
    "\001\002\000\004\045\046\001\002\000\022\003\uffde\017" +
    "\uffde\041\uffde\044\uffde\045\uffde\046\uffde\047\uffde\050\uffde" +
    "\001\002\000\004\004\047\001\002\000\022\003\uffe1\017" +
    "\uffe1\041\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\001\002\000\004\020\ufff2\001\002\000\004\020\053\001" +
    "\002\000\022\005\061\006\055\011\071\014\072\015\065" +
    "\016\056\030\067\041\010\001\002\000\004\037\054\001" +
    "\002\000\024\003\uffa8\005\uffa8\006\uffa8\011\uffa8\014\uffa8" +
    "\015\uffa8\016\uffa8\030\uffa8\041\uffa8\001\002\000\022\005" +
    "\uffb6\006\uffb6\011\uffb6\014\uffb6\015\uffb6\016\uffb6\030\uffb6" +
    "\041\uffb6\001\002\000\052\003\uffc6\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\021\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033" +
    "\uffc6\051\uffc6\052\uffc6\053\uffc6\001\002\000\006\051\ufff1" +
    "\052\ufff1\001\002\000\046\003\112\004\uffd2\005\101\006" +
    "\111\007\107\010\075\013\076\023\105\024\100\025\106" +
    "\026\110\027\114\031\077\032\102\033\113\051\uffd2\052" +
    "\uffd2\053\uffd2\001\002\000\022\005\uffb7\006\uffb7\011\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\030\uffb7\041\uffb7\001\002\000" +
    "\052\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\012\uffd0\013\uffd0\021\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\051\uffd0\052\uffd0" +
    "\053\uffd0\001\002\000\022\005\061\006\055\011\071\014" +
    "\072\015\065\016\056\030\067\041\010\001\002\000\006" +
    "\051\122\052\124\001\002\000\052\003\uffc7\004\uffc7\005" +
    "\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\021\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\051\uffc7\052\uffc7\053\uffc7\001\002\000\052" +
    "\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012" +
    "\uffd1\013\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\031\uffd1\032\uffd1\033\uffd1\051\uffd1\052\uffd1\053" +
    "\uffd1\001\002\000\022\005\uffc0\006\uffc0\011\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\030\uffc0\041\uffc0\001\002\000\022\005" +
    "\061\006\055\011\071\014\072\015\065\016\056\030\067" +
    "\041\010\001\002\000\022\005\061\006\055\011\071\014" +
    "\072\015\065\016\056\030\067\041\010\001\002\000\052" +
    "\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\012" +
    "\uffc8\013\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8" +
    "\027\uffc8\031\uffc8\032\uffc8\033\uffc8\051\uffc8\052\uffc8\053" +
    "\uffc8\001\002\000\040\003\112\005\101\006\111\007\107" +
    "\010\075\012\103\013\076\023\105\024\100\025\106\026" +
    "\110\027\114\031\077\032\102\033\113\001\002\000\022" +
    "\005\061\006\055\011\071\014\072\015\065\016\056\030" +
    "\067\041\010\001\002\000\022\005\uffba\006\uffba\011\uffba" +
    "\014\uffba\015\uffba\016\uffba\030\uffba\041\uffba\001\002\000" +
    "\022\005\uffb8\006\uffb8\011\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\030\uffb8\041\uffb8\001\002\000\022\005\uffbf\006\uffbf\011" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\030\uffbf\041\uffbf\001\002" +
    "\000\022\005\uffc4\006\uffc4\011\uffc4\014\uffc4\015\uffc4\016" +
    "\uffc4\030\uffc4\041\uffc4\001\002\000\022\005\uffbc\006\uffbc" +
    "\011\uffbc\014\uffbc\015\uffbc\016\uffbc\030\uffbc\041\uffbc\001" +
    "\002\000\022\005\uffbd\006\uffbd\011\uffbd\014\uffbd\015\uffbd" +
    "\016\uffbd\030\uffbd\041\uffbd\001\002\000\052\003\uffc9\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\012\uffc9\013\uffc9" +
    "\021\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\051\uffc9\052\uffc9\053\uffc9\001\002" +
    "\000\022\005\061\006\055\011\071\014\072\015\065\016" +
    "\056\030\067\041\010\001\002\000\022\005\uffc5\006\uffc5" +
    "\011\uffc5\014\uffc5\015\uffc5\016\uffc5\030\uffc5\041\uffc5\001" +
    "\002\000\022\005\uffc2\006\uffc2\011\uffc2\014\uffc2\015\uffc2" +
    "\016\uffc2\030\uffc2\041\uffc2\001\002\000\022\005\uffb9\006" +
    "\uffb9\011\uffb9\014\uffb9\015\uffb9\016\uffb9\030\uffb9\041\uffb9" +
    "\001\002\000\022\005\uffc3\006\uffc3\011\uffc3\014\uffc3\015" +
    "\uffc3\016\uffc3\030\uffc3\041\uffc3\001\002\000\022\005\uffbb" +
    "\006\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb\030\uffbb\041" +
    "\uffbb\001\002\000\052\003\uffcf\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\012\uffcf\013\uffcf\021\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\051\uffcf\052\uffcf\053\uffcf\001\002\000\022\005\uffbe\006" +
    "\uffbe\011\uffbe\014\uffbe\015\uffbe\016\uffbe\030\uffbe\041\uffbe" +
    "\001\002\000\022\005\uffc1\006\uffc1\011\uffc1\014\uffc1\015" +
    "\uffc1\016\uffc1\030\uffc1\041\uffc1\001\002\000\022\005\061" +
    "\006\055\011\071\014\072\015\065\016\056\030\067\041" +
    "\010\001\002\000\052\003\112\004\uffcb\005\101\006\111" +
    "\007\107\010\075\012\uffcb\013\076\021\uffcb\023\105\024" +
    "\100\025\106\026\110\027\114\031\077\032\102\033\113" +
    "\051\uffcb\052\uffcb\053\uffcb\001\002\000\052\003\112\004" +
    "\uffca\005\101\006\111\007\107\010\075\012\uffca\013\076" +
    "\021\uffca\023\105\024\100\025\106\026\110\027\114\031" +
    "\077\032\102\033\113\051\uffca\052\uffca\053\uffca\001\002" +
    "\000\052\003\112\004\uffcd\005\101\006\111\007\107\010" +
    "\075\012\uffcd\013\076\021\uffcd\023\105\024\100\025\106" +
    "\026\110\027\114\031\077\032\102\033\113\051\uffcd\052" +
    "\uffcd\053\uffcd\001\002\000\052\003\112\004\uffcc\005\101" +
    "\006\111\007\107\010\075\012\uffcc\013\076\021\uffcc\023" +
    "\105\024\100\025\106\026\110\027\114\031\077\032\102" +
    "\033\113\051\uffcc\052\uffcc\053\uffcc\001\002\000\022\005" +
    "\ufff0\006\ufff0\011\ufff0\014\ufff0\015\ufff0\016\ufff0\030\ufff0" +
    "\041\ufff0\001\002\000\022\005\061\006\055\011\071\014" +
    "\072\015\065\016\056\030\067\041\010\001\002\000\022" +
    "\005\uffef\006\uffef\011\uffef\014\uffef\015\uffef\016\uffef\030" +
    "\uffef\041\uffef\001\002\000\004\053\ufff3\001\002\000\004" +
    "\053\uffee\001\002\000\052\003\112\004\uffce\005\101\006" +
    "\111\007\107\010\075\012\uffce\013\076\021\uffce\023\105" +
    "\024\100\025\106\026\110\027\114\031\077\032\102\033" +
    "\113\051\uffce\052\uffce\053\uffce\001\002\000\014\003\031" +
    "\041\010\044\041\045\ufff9\050\036\001\002\000\012\003" +
    "\031\041\010\045\ufff9\050\036\001\002\000\012\003\uffeb" +
    "\041\uffeb\045\uffeb\050\uffeb\001\002\000\012\003\uffed\041" +
    "\uffed\045\uffed\050\uffed\001\002\000\004\045\046\001\002" +
    "\000\012\003\uffec\041\uffec\045\uffec\050\uffec\001\002\000" +
    "\004\045\137\001\002\000\004\040\140\001\002\000\004" +
    "\002\ufffc\001\002\000\022\003\uffdd\017\uffdd\041\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\001\002\000\012" +
    "\003\031\041\010\045\ufff9\050\036\001\002\000\004\045" +
    "\046\001\002\000\022\003\uffdb\017\uffdb\041\uffdb\044\uffdb" +
    "\045\uffdb\046\uffdb\047\uffdb\050\uffdb\001\002\000\004\011" +
    "\147\001\002\000\004\020\166\001\002\000\004\041\010" +
    "\001\002\000\006\020\uffa2\021\uffa2\001\002\000\006\020" +
    "\160\021\157\001\002\000\004\012\156\001\002\000\006" +
    "\004\154\012\uffd7\001\002\000\004\041\010\001\002\000" +
    "\004\012\uffd8\001\002\000\006\004\uffda\020\uffda\001\002" +
    "\000\004\041\010\001\002\000\010\034\161\035\163\036" +
    "\162\001\002\000\006\004\uffa0\012\uffa0\001\002\000\006" +
    "\004\uffa1\012\uffa1\001\002\000\006\004\uff9f\012\uff9f\001" +
    "\002\000\006\004\uffd9\012\uffd9\001\002\000\006\020\uffa3" +
    "\021\uffa3\001\002\000\010\034\161\035\163\036\162\001" +
    "\002\000\004\004\170\001\002\000\004\044\uffdc\001\002" +
    "\000\012\003\ufff8\041\ufff8\045\ufff8\050\ufff8\001\002\000" +
    "\004\037\222\001\002\000\024\003\uffaa\005\uffaa\006\uffaa" +
    "\011\uffaa\014\uffaa\015\uffaa\016\uffaa\030\uffaa\041\uffaa\001" +
    "\002\000\024\003\220\005\061\006\055\011\071\014\072" +
    "\015\065\016\056\030\067\041\010\001\002\000\004\037" +
    "\216\001\002\000\024\003\uffab\005\uffab\006\uffab\011\uffab" +
    "\014\uffab\015\uffab\016\uffab\030\uffab\041\uffab\001\002\000" +
    "\004\037\215\001\002\000\024\003\uffad\005\uffad\006\uffad" +
    "\011\uffad\014\uffad\015\uffad\016\uffad\030\uffad\041\uffad\001" +
    "\002\000\024\003\uffae\005\uffae\006\uffae\011\uffae\014\uffae" +
    "\015\uffae\016\uffae\030\uffae\041\uffae\001\002\000\004\037" +
    "\214\001\002\000\024\003\uffa9\005\uffa9\006\uffa9\011\uffa9" +
    "\014\uffa9\015\uffa9\016\uffa9\030\uffa9\041\uffa9\001\002\000" +
    "\024\003\uffac\005\uffac\006\uffac\011\uffac\014\uffac\015\uffac" +
    "\016\uffac\030\uffac\041\uffac\001\002\000\022\005\061\006" +
    "\055\011\071\014\072\015\065\016\056\030\067\041\010" +
    "\001\002\000\042\003\112\005\101\006\111\007\107\010" +
    "\075\012\uffd5\013\076\021\uffd5\023\105\024\100\025\106" +
    "\026\110\027\114\031\077\032\102\033\113\001\002\000" +
    "\006\012\211\021\210\001\002\000\022\005\061\006\055" +
    "\011\071\014\072\015\065\016\056\030\067\041\010\001" +
    "\002\000\004\004\212\001\002\000\012\003\uffd6\041\uffd6" +
    "\045\uffd6\050\uffd6\001\002\000\042\003\112\005\101\006" +
    "\111\007\107\010\075\012\uffd4\013\076\021\uffd4\023\105" +
    "\024\100\025\106\026\110\027\114\031\077\032\102\033" +
    "\113\001\002\000\024\003\uffa5\005\uffa5\006\uffa5\011\uffa5" +
    "\014\uffa5\015\uffa5\016\uffa5\030\uffa5\041\uffa5\001\002\000" +
    "\024\003\uffa7\005\uffa7\006\uffa7\011\uffa7\014\uffa7\015\uffa7" +
    "\016\uffa7\030\uffa7\041\uffa7\001\002\000\024\003\uffa4\005" +
    "\uffa4\006\uffa4\011\uffa4\014\uffa4\015\uffa4\016\uffa4\030\uffa4" +
    "\041\uffa4\001\002\000\004\004\221\001\002\000\012\003" +
    "\uffaf\041\uffaf\045\uffaf\050\uffaf\001\002\000\012\003\uffb0" +
    "\041\uffb0\045\uffb0\050\uffb0\001\002\000\024\003\uffa6\005" +
    "\uffa6\006\uffa6\011\uffa6\014\uffa6\015\uffa6\016\uffa6\030\uffa6" +
    "\041\uffa6\001\002\000\004\040\224\001\002\000\004\002" +
    "\ufffb\001\002\000\004\011\147\001\002\000\004\004\227" +
    "\001\002\000\004\044\uffdf\001\002\000\014\003\031\041" +
    "\010\044\026\045\ufff9\050\036\001\002\000\004\002\ufffe" +
    "\001\002\000\006\020\240\021\157\001\002\000\020\003" +
    "\uffb2\041\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\001\002\000\020\003\uffb5\041\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\001\002\000\006\041\010\042\235" +
    "\001\002\000\020\003\uffb3\041\uffb3\044\uffb3\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\001\002\000\020\003\uffb4\041\uffb4" +
    "\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\001\002\000" +
    "\010\034\161\035\163\036\162\001\002\000\004\004\242" +
    "\001\002\000\020\003\uffb1\041\uffb1\044\uffb1\045\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\005\014\006\012\042\013\001\001\000\004" +
    "\050\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\040\232\041\233\047\231\050\147" +
    "\001\001\000\014\007\020\011\024\012\031\013\036\042" +
    "\227\001\001\000\004\006\015\001\001\000\002\001\001" +
    "\000\034\004\026\007\020\011\024\012\031\013\036\022" +
    "\033\024\017\025\022\026\037\050\021\055\032\060\034" +
    "\061\027\001\001\000\004\050\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\062\173\063\177\064\203" +
    "\065\175\066\172\067\202\001\001\000\016\022\033\026" +
    "\170\050\021\055\032\060\034\061\027\001\001\000\004" +
    "\050\144\001\001\000\006\010\140\020\141\001\001\000" +
    "\022\022\033\024\135\025\022\026\037\050\021\055\032" +
    "\060\034\061\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\050\047\054" +
    "\050\001\001\000\006\014\041\020\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\022" +
    "\033\024\043\025\022\026\037\050\021\055\032\060\034" +
    "\061\027\001\001\000\004\021\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\051\001\001\000\020\030\065\031\057\033" +
    "\062\036\067\037\056\050\061\056\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\103\034\073\035\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\030" +
    "\065\031\126\033\062\036\067\050\061\001\001\000\004" +
    "\057\122\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\030\065\031\120\033\062\036\067" +
    "\050\061\001\001\000\014\030\065\031\072\033\062\036" +
    "\067\050\061\001\001\000\002\001\001\000\010\032\103" +
    "\034\073\035\114\001\001\000\014\030\065\031\117\033" +
    "\062\036\067\050\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\030\065" +
    "\031\116\033\062\036\067\050\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\030\065\031\115\033\062\036\067" +
    "\050\061\001\001\000\010\032\103\034\073\035\114\001" +
    "\001\000\010\032\103\034\073\035\114\001\001\000\010" +
    "\032\103\034\073\035\114\001\001\000\010\032\103\034" +
    "\073\035\114\001\001\000\002\001\001\000\020\030\065" +
    "\031\057\033\062\036\067\037\125\050\061\051\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\103\034\073\035\114\001\001\000\026\020" +
    "\130\022\033\024\131\025\022\026\037\050\021\052\132" +
    "\055\032\060\034\061\027\001\001\000\022\022\033\024" +
    "\133\025\022\026\037\050\021\055\032\060\034\061\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\022" +
    "\033\024\142\025\022\026\037\050\021\055\032\060\034" +
    "\061\027\001\001\000\004\021\143\001\001\000\002\001" +
    "\001\000\004\017\145\001\001\000\002\001\001\000\012" +
    "\015\152\016\151\047\150\050\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\015\152\016\154\047\150\050\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\050\164\001\001" +
    "\000\004\053\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\030\065\031\057\033\062\036\067\037\216\050" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\206" +
    "\030\065\031\205\033\062\036\067\050\061\001\001\000" +
    "\010\032\103\034\073\035\114\001\001\000\002\001\001" +
    "\000\014\030\065\031\212\033\062\036\067\050\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\032\103" +
    "\034\073\035\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\230\022\033\024\017\025" +
    "\022\026\037\050\021\055\032\060\034\061\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\040\236\047\231\050\147\001\001\000\012\040\232" +
    "\041\235\047\231\050\147\001\001\000\010\040\236\047" +
    "\231\050\147\001\001\000\002\001\001\000\004\053\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;
  public static int errors = 0;

  public void report_error(String message, Object info){
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message +
							"near " + lexer.current_lexeme());
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_def_part program_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_def ::= variable_def_part header_declarations body_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_def ::= header_declarations variable_def_part body_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_def_part ::= PROGRAM identifier SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body_def_part ::= BEGIN stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body_def_part ::= stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_def_part ::= stmt_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt_def_list ::= stmt_def_list stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_def_list ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= for_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= attr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // for_designator ::= FOR control_variable equal_op initial_value direction final_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_designator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // control_variable ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_variable",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // initial_value ::= exp_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_value",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // direction ::= TO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direction",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // direction ::= DOWNTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direction",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // final_value ::= exp_part 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("final_value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for_def_part ::= for_designator DO for_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for_stmt ::= block stmt_def_part block_end 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // for_stmt ::= stmt_def_part 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // for_def_part ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG3
parser.report_error("Error in for definition ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // const_def_part ::= CONST const_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_part",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // const_def_list ::= const_def_list const_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // const_def_list ::= const_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // const_def ::= identifier_list COLON type_def EQUAL exp_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // identifier ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // header_declarations ::= header_declarations procedure_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // header_declarations ::= header_declarations function_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // block ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // block_end ::= END SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_end",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedure_def_part ::= procedure_declaration procedure_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_def_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedure_declaration ::= PROCEDURE identifier parameters_list SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_def_part ::= function_declaration function_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_def_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_declaration ::= FUNCTION identifier parameters_list COLON type_def SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameters_list ::= LPAREN parameters RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter ::= identifier_list COLON type_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameters ::= parameter SEMI parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // call ::= identifier LPAREN args RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // args ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // args ::= args COMMA exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp_list ::= exp_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_part ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_part",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp error 
            {
              Object RESULT =null;
		//@@CUPDBG4
 parser.report_error("Missing operand ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= bool_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp log_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= un_arim_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp bin_arim_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp rel_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rel_op ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rel_op ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rel_op ::= GE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rel_op ::= LE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rel_op ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bool_op ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // log_op ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // log_op ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // log_op ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bin_arim_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bin_arim_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bin_arim_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bin_arim_op ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bin_arim_op ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // un_arim_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // un_arim_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variable_def_part ::= VAR variable_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variable_def_list ::= variable_def_list variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable_def_list ::= NEWLINE variable_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variable_def_list ::= variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variable_def ::= identifier_list COLON type_def SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // attr ::= identifier assign_operator exp_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // attr ::= identifier assign_operator error 
            {
              Object RESULT =null;
		//@@CUPDBG5
 parser.report_error("Error in expression ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assign_operator ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG6
 parser.report_error("Expected symbol before = ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign_operator ::= equal_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assign_operator ::= sum_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assign_operator ::= minus_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assign_operator ::= times_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assign_operator ::= divide_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // equal_op ::= COLON EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equal_op",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sum_op ::= PLUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sum_op",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // minus_op ::= MINUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // times_op ::= TIMES EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_op",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // divide_op ::= DIVIDE EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("divide_op",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // identifier_list ::= identifier_list COMMA identifier 
            {
              List<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // identifier_list ::= identifier 
            {
              List<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type_def ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type_def ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type_def ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // header_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
