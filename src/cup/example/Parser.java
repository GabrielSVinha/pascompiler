
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import java.util.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.*;
import type.*;
import symbolTable.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\154\000\002\002\004\000\002\002\004\000\002\005" +
    "\006\000\002\005\005\000\002\003\005\000\002\007\011" +
    "\000\002\021\005\000\002\021\003\000\002\022\003\000" +
    "\002\004\006\000\002\004\005\000\002\027\003\000\002" +
    "\027\002\000\002\030\004\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\063\010" +
    "\000\002\057\003\000\002\061\003\000\002\062\003\000" +
    "\002\062\003\000\002\043\003\000\002\060\005\000\002" +
    "\055\005\000\002\055\003\000\002\060\003\000\002\054" +
    "\003\000\002\006\004\000\002\006\004\000\002\023\003" +
    "\000\002\024\004\000\002\013\005\000\002\014\006\000" +
    "\002\015\005\000\002\010\005\000\002\012\010\000\002" +
    "\011\005\000\002\020\005\000\002\020\002\000\002\016" +
    "\005\000\002\017\005\000\002\017\003\000\002\025\007" +
    "\000\002\026\003\000\002\026\005\000\002\042\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\004\000\002" +
    "\034\004\000\002\034\005\000\002\034\004\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\036\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\040\003\000\002\040\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\041\003\000\002\041\003\000\002\046\004\000\002" +
    "\045\004\000\002\045\003\000\002\044\006\000\002\074" +
    "\002\000\002\044\005\000\002\064\006\000\002\064\005" +
    "\000\002\064\005\000\002\065\003\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\066\004\000\002\067" +
    "\004\000\002\070\004\000\002\071\004\000\002\072\004" +
    "\000\002\073\003\000\002\053\005\000\002\053\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\006\002\000\002\046\002\000\002\033" +
    "\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\004\046\006\001\002\000\004\002\270\001" +
    "\002\000\024\003\uff99\020\uff99\024\015\044\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\001\002\000\004\044" +
    "\010\001\002\000\004\004\011\001\002\000\060\003\uffe5" +
    "\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\021\uffe5\022\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\033\uffe5\034\uffe5\035\uffe5\042\uffe5\054" +
    "\uffe5\055\uffe5\056\uffe5\001\002\000\024\003\ufffd\020\ufffd" +
    "\024\ufffd\044\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053" +
    "\ufffd\001\002\000\022\003\uff98\020\052\044\uff98\047\uff98" +
    "\050\uff98\051\055\052\062\053\uff98\001\002\000\022\003" +
    "\uff98\020\052\044\uff98\047\uff98\050\uff98\051\uff98\052\uff98" +
    "\053\uff98\001\002\000\004\002\000\001\002\000\004\044" +
    "\010\001\002\000\020\003\027\005\026\006\017\007\022" +
    "\010\032\021\024\042\025\001\002\000\004\042\051\001" +
    "\002\000\004\011\041\001\002\000\026\003\uffa8\005\uffa8" +
    "\006\uffa8\011\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\032" +
    "\uffa8\044\uffa8\001\002\000\004\042\040\001\002\000\026" +
    "\003\uffa9\005\uffa9\006\uffa9\011\uffa9\014\uffa9\015\uffa9\016" +
    "\uffa9\017\uffa9\032\uffa9\044\uffa9\001\002\000\004\042\037" +
    "\001\002\000\026\003\uffa0\005\uffa0\006\uffa0\011\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\032\uffa0\044\uffa0\001\002" +
    "\000\004\042\036\001\002\000\026\003\uffac\005\uffac\006" +
    "\uffac\011\uffac\014\uffac\015\uffac\016\uffac\017\uffac\032\uffac" +
    "\044\uffac\001\002\000\026\003\uffab\005\uffab\006\uffab\011" +
    "\uffab\014\uffab\015\uffab\016\uffab\017\uffab\032\uffab\044\uffab" +
    "\001\002\000\026\003\uffa6\005\uffa6\006\uffa6\011\uffa6\014" +
    "\uffa6\015\uffa6\016\uffa6\017\uffa6\032\uffa6\044\uffa6\001\002" +
    "\000\004\042\035\001\002\000\026\003\uffaa\005\uffaa\006" +
    "\uffaa\011\uffaa\014\uffaa\015\uffaa\016\uffaa\017\uffaa\032\uffaa" +
    "\044\uffaa\001\002\000\026\003\uffa7\005\uffa7\006\uffa7\011" +
    "\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\032\uffa7\044\uffa7" +
    "\001\002\000\026\003\uffa2\005\uffa2\006\uffa2\011\uffa2\014" +
    "\uffa2\015\uffa2\016\uffa2\017\uffa2\032\uffa2\044\uffa2\001\002" +
    "\000\026\003\uffa4\005\uffa4\006\uffa4\011\uffa4\014\uffa4\015" +
    "\uffa4\016\uffa4\017\uffa4\032\uffa4\044\uffa4\001\002\000\026" +
    "\003\uffa5\005\uffa5\006\uffa5\011\uffa5\014\uffa5\015\uffa5\016" +
    "\uffa5\017\uffa5\032\uffa5\044\uffa5\001\002\000\026\003\uffa1" +
    "\005\uffa1\006\uffa1\011\uffa1\014\uffa1\015\uffa1\016\uffa1\017" +
    "\uffa1\032\uffa1\044\uffa1\001\002\000\004\044\010\001\002" +
    "\000\006\012\ufffa\022\ufffa\001\002\000\006\012\ufff9\022" +
    "\ufff9\001\002\000\006\012\046\022\045\001\002\000\004" +
    "\044\010\001\002\000\004\004\047\001\002\000\022\003" +
    "\ufffc\020\ufffc\044\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc" +
    "\053\ufffc\001\002\000\006\012\ufffb\022\ufffb\001\002\000" +
    "\026\003\uffa3\005\uffa3\006\uffa3\011\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\017\uffa3\032\uffa3\044\uffa3\001\002\000\006\003" +
    "\254\044\010\001\002\000\020\003\uff99\044\uff99\047\uff99" +
    "\050\uff99\051\uff99\052\uff99\053\uff99\001\002\000\020\003" +
    "\067\044\010\047\064\050\ufff5\051\055\052\062\053\074" +
    "\001\002\000\004\044\010\001\002\000\004\050\247\001" +
    "\002\000\022\003\uffe3\020\uffe3\044\uffe3\047\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\001\002\000\022\003\027\005" +
    "\026\006\017\007\022\010\032\011\233\021\024\042\025" +
    "\001\002\000\012\003\067\044\010\050\ufff6\053\074\001" +
    "\002\000\004\044\010\001\002\000\006\020\052\047\uff98" +
    "\001\002\000\012\003\067\044\010\050\ufff5\053\074\001" +
    "\002\000\004\002\uffff\001\002\000\012\003\ufff2\044\ufff2" +
    "\050\ufff2\053\ufff2\001\002\000\012\003\uffe6\044\uffe6\050" +
    "\uffe6\053\uffe6\001\002\000\022\003\uffe4\020\uffe4\044\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\001\002\000" +
    "\012\003\ufff1\044\ufff1\050\ufff1\053\ufff1\001\002\000\012" +
    "\003\ufff0\044\ufff0\050\ufff0\053\ufff0\001\002\000\004\056" +
    "\166\001\002\000\004\044\010\001\002\000\006\020\052" +
    "\047\uff98\001\002\000\012\003\ufff3\044\ufff3\050\ufff3\053" +
    "\ufff3\001\002\000\004\047\100\001\002\000\012\003\uffe2" +
    "\044\uffe2\050\uffe2\053\uffe2\001\002\000\022\003\uffe0\020" +
    "\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\001\002\000\012\003\067\044\010\050\ufff5\053\074\001" +
    "\002\000\004\050\105\001\002\000\022\003\uffde\020\uffde" +
    "\044\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\001" +
    "\002\000\004\004\106\001\002\000\022\003\uffe1\020\uffe1" +
    "\044\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\053\uffe1\001" +
    "\002\000\004\021\uffee\001\002\000\004\021\024\001\002" +
    "\000\024\005\117\006\112\011\127\014\130\015\123\016" +
    "\113\017\116\032\126\044\010\001\002\000\024\005\uffb6" +
    "\006\uffb6\011\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6\032" +
    "\uffb6\044\uffb6\001\002\000\052\003\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\022\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\033\uffc7\034\uffc7" +
    "\035\uffc7\054\uffc7\055\uffc7\056\uffc7\001\002\000\046\003" +
    "\150\004\uffd2\005\137\006\147\007\145\010\133\013\134" +
    "\025\143\026\136\027\144\030\146\031\152\033\135\034" +
    "\140\035\151\054\uffd2\055\uffd2\056\uffd2\001\002\000\006" +
    "\054\uffed\055\uffed\001\002\000\052\003\uffc6\004\uffc6\005" +
    "\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6\013\uffc6\022\uffc6" +
    "\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\054\uffc6\055\uffc6\056\uffc6\001\002\000\024" +
    "\005\uffb7\006\uffb7\011\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\032\uffb7\044\uffb7\001\002\000\052\003\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\022" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033\uffd0" +
    "\034\uffd0\035\uffd0\054\uffd0\055\uffd0\056\uffd0\001\002\000" +
    "\024\005\117\006\112\011\127\014\130\015\123\016\113" +
    "\017\116\032\126\044\010\001\002\000\006\054\160\055" +
    "\162\001\002\000\052\003\uff97\004\uff97\005\uff97\006\uff97" +
    "\007\uff97\010\uff97\012\uff97\013\uff97\022\uff97\025\uff97\026" +
    "\uff97\027\uff97\030\uff97\031\uff97\033\uff97\034\uff97\035\uff97" +
    "\054\uff97\055\uff97\056\uff97\001\002\000\024\005\117\006" +
    "\112\011\127\014\130\015\123\016\113\017\116\032\126" +
    "\044\010\001\002\000\052\003\uffd1\004\uffd1\005\uffd1\006" +
    "\uffd1\007\uffd1\010\uffd1\012\uffd1\013\uffd1\022\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\054\uffd1\055\uffd1\056\uffd1\001\002\000\024\005\uffc0" +
    "\006\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0\032" +
    "\uffc0\044\uffc0\001\002\000\024\005\117\006\112\011\127" +
    "\014\130\015\123\016\113\017\116\032\126\044\010\001" +
    "\002\000\052\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\012\uffc8\013\uffc8\022\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\uffc8\031\uffc8\033\uffc8\034\uffc8\035\uffc8\054\uffc8" +
    "\055\uffc8\056\uffc8\001\002\000\040\003\150\005\137\006" +
    "\147\007\145\010\133\012\141\013\134\025\143\026\136" +
    "\027\144\030\146\031\152\033\135\034\140\035\151\001" +
    "\002\000\024\005\117\006\112\011\127\014\130\015\123" +
    "\016\113\017\116\032\126\044\010\001\002\000\024\005" +
    "\uffba\006\uffba\011\uffba\014\uffba\015\uffba\016\uffba\017\uffba" +
    "\032\uffba\044\uffba\001\002\000\024\005\uffb8\006\uffb8\011" +
    "\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\032\uffb8\044\uffb8" +
    "\001\002\000\024\005\uffbf\006\uffbf\011\uffbf\014\uffbf\015" +
    "\uffbf\016\uffbf\017\uffbf\032\uffbf\044\uffbf\001\002\000\024" +
    "\005\uffc4\006\uffc4\011\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\032\uffc4\044\uffc4\001\002\000\024\005\uffbc\006\uffbc" +
    "\011\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\032\uffbc\044" +
    "\uffbc\001\002\000\024\005\uffbd\006\uffbd\011\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\032\uffbd\044\uffbd\001\002\000" +
    "\052\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9" +
    "\012\uffc9\013\uffc9\022\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\054\uffc9\055\uffc9" +
    "\056\uffc9\001\002\000\024\005\117\006\112\011\127\014" +
    "\130\015\123\016\113\017\116\032\126\044\010\001\002" +
    "\000\024\005\uffc5\006\uffc5\011\uffc5\014\uffc5\015\uffc5\016" +
    "\uffc5\017\uffc5\032\uffc5\044\uffc5\001\002\000\024\005\uffc2" +
    "\006\uffc2\011\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\032" +
    "\uffc2\044\uffc2\001\002\000\024\005\uffb9\006\uffb9\011\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\032\uffb9\044\uffb9\001" +
    "\002\000\024\005\uffc3\006\uffc3\011\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\032\uffc3\044\uffc3\001\002\000\024\005" +
    "\uffbb\006\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb" +
    "\032\uffbb\044\uffbb\001\002\000\052\003\uffcf\004\uffcf\005" +
    "\uffcf\006\uffcf\007\uffcf\010\uffcf\012\uffcf\013\uffcf\022\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf\034" +
    "\uffcf\035\uffcf\054\uffcf\055\uffcf\056\uffcf\001\002\000\024" +
    "\005\uffbe\006\uffbe\011\uffbe\014\uffbe\015\uffbe\016\uffbe\017" +
    "\uffbe\032\uffbe\044\uffbe\001\002\000\024\005\uffc1\006\uffc1" +
    "\011\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\032\uffc1\044" +
    "\uffc1\001\002\000\024\005\117\006\112\011\127\014\130" +
    "\015\123\016\113\017\116\032\126\044\010\001\002\000" +
    "\052\003\150\004\uffcb\005\137\006\147\007\145\010\133" +
    "\012\uffcb\013\134\022\uffcb\025\143\026\136\027\144\030" +
    "\146\031\152\033\135\034\140\035\151\054\uffcb\055\uffcb" +
    "\056\uffcb\001\002\000\052\003\150\004\uffca\005\137\006" +
    "\147\007\145\010\133\012\uffca\013\134\022\uffca\025\143" +
    "\026\136\027\144\030\146\031\152\033\135\034\140\035" +
    "\151\054\uffca\055\uffca\056\uffca\001\002\000\052\003\150" +
    "\004\uffcd\005\137\006\147\007\145\010\133\012\uffcd\013" +
    "\134\022\uffcd\025\143\026\136\027\144\030\146\031\152" +
    "\033\135\034\140\035\151\054\uffcd\055\uffcd\056\uffcd\001" +
    "\002\000\052\003\150\004\uffcc\005\137\006\147\007\145" +
    "\010\133\012\uffcc\013\134\022\uffcc\025\143\026\136\027" +
    "\144\030\146\031\152\033\135\034\140\035\151\054\uffcc" +
    "\055\uffcc\056\uffcc\001\002\000\024\005\uffec\006\uffec\011" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\032\uffec\044\uffec" +
    "\001\002\000\024\005\117\006\112\011\127\014\130\015" +
    "\123\016\113\017\116\032\126\044\010\001\002\000\024" +
    "\005\uffeb\006\uffeb\011\uffeb\014\uffeb\015\uffeb\016\uffeb\017" +
    "\uffeb\032\uffeb\044\uffeb\001\002\000\004\056\uffef\001\002" +
    "\000\004\056\uffea\001\002\000\052\003\150\004\uffce\005" +
    "\137\006\147\007\145\010\133\012\uffce\013\134\022\uffce" +
    "\025\143\026\136\027\144\030\146\031\152\033\135\034" +
    "\140\035\151\054\uffce\055\uffce\056\uffce\001\002\000\014" +
    "\003\067\044\010\047\100\050\ufff5\053\074\001\002\000" +
    "\012\003\067\044\010\050\ufff5\053\074\001\002\000\012" +
    "\003\uffe7\044\uffe7\050\uffe7\053\uffe7\001\002\000\012\003" +
    "\uffe9\044\uffe9\050\uffe9\053\uffe9\001\002\000\004\050\105" +
    "\001\002\000\012\003\uffe8\044\uffe8\050\uffe8\053\uffe8\001" +
    "\002\000\004\050\175\001\002\000\004\043\176\001\002" +
    "\000\004\002\ufff8\001\002\000\004\047\100\001\002\000" +
    "\022\003\uffdd\020\uffdd\044\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\001\002\000\012\003\067\044\010\050" +
    "\ufff5\053\074\001\002\000\004\050\105\001\002\000\022" +
    "\003\uffdb\020\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\001\002\000\006\011\206\021\uffd9\001\002" +
    "\000\004\021\226\001\002\000\004\044\010\001\002\000" +
    "\006\021\uff9e\022\uff9e\001\002\000\006\021\217\022\216" +
    "\001\002\000\004\012\215\001\002\000\006\004\213\012" +
    "\uffd6\001\002\000\004\044\010\001\002\000\004\012\uffd7" +
    "\001\002\000\006\004\uffda\021\uffda\001\002\000\004\044" +
    "\010\001\002\000\012\036\222\037\224\040\220\041\221" +
    "\001\002\000\006\004\uff9d\012\uff9d\001\002\000\006\004" +
    "\uff9a\012\uff9a\001\002\000\006\004\uff9c\012\uff9c\001\002" +
    "\000\006\004\uffd8\012\uffd8\001\002\000\006\004\uff9b\012" +
    "\uff9b\001\002\000\006\021\uff9f\022\uff9f\001\002\000\012" +
    "\036\222\037\224\040\220\041\221\001\002\000\004\004" +
    "\230\001\002\000\006\020\uffdc\047\uffdc\001\002\000\012" +
    "\003\ufff4\044\ufff4\050\ufff4\053\ufff4\001\002\000\026\003" +
    "\244\005\117\006\112\011\127\014\130\015\123\016\113" +
    "\017\116\032\126\044\010\001\002\000\024\005\117\006" +
    "\112\011\127\014\130\015\123\016\113\017\116\032\126" +
    "\044\010\001\002\000\042\003\150\005\137\006\147\007" +
    "\145\010\133\012\uffd4\013\134\022\uffd4\025\143\026\136" +
    "\027\144\030\146\031\152\033\135\034\140\035\151\001" +
    "\002\000\006\012\237\022\236\001\002\000\024\005\117" +
    "\006\112\011\127\014\130\015\123\016\113\017\116\032" +
    "\126\044\010\001\002\000\004\004\240\001\002\000\012" +
    "\003\uffd5\044\uffd5\050\uffd5\053\uffd5\001\002\000\042\003" +
    "\150\005\137\006\147\007\145\010\133\012\uffd3\013\134" +
    "\022\uffd3\025\143\026\136\027\144\030\146\031\152\033" +
    "\135\034\140\035\151\001\002\000\004\004\246\001\002" +
    "\000\042\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010" +
    "\uffd0\011\233\013\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\033\uffd0\034\uffd0\035\uffd0\001\002\000\012\003" +
    "\uffad\044\uffad\050\uffad\053\uffad\001\002\000\012\003\uffae" +
    "\044\uffae\050\uffae\053\uffae\001\002\000\012\003\uffaf\044" +
    "\uffaf\050\uffaf\053\uffaf\001\002\000\004\043\250\001\002" +
    "\000\004\002\ufff7\001\002\000\006\004\uffd9\011\206\001" +
    "\002\000\004\004\253\001\002\000\006\020\uffdf\047\uffdf" +
    "\001\002\000\004\004\uffb1\001\002\000\020\003\uffb3\044" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002" +
    "\000\006\021\261\022\216\001\002\000\020\003\254\044" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002" +
    "\000\020\003\uffb4\044\uffb4\047\uffb4\050\uffb4\051\uffb4\052" +
    "\uffb4\053\uffb4\001\002\000\012\036\222\037\224\040\220" +
    "\041\221\001\002\000\004\004\263\001\002\000\020\003" +
    "\uffb2\044\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\001\002\000\004\004\265\001\002\000\020\003\uffb0\044" +
    "\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\001\002" +
    "\000\014\003\067\044\010\047\064\050\ufff5\053\074\001" +
    "\002\000\004\002\ufffe\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\266\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\005\013\006\011\007\012\001\001\000\004" +
    "\054\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\056\012\062\013\067\014\074" +
    "\046\265\001\001\000\004\046\052\001\001\000\002\001" +
    "\001\000\004\054\015\001\001\000\020\065\017\066\027" +
    "\067\032\070\022\071\020\072\033\073\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\021\043\022\041\054" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\022\047\054\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\044\254\045\256\053\255\054\206\001\001\000" +
    "\004\006\053\001\001\000\034\004\064\010\056\012\062" +
    "\013\067\014\074\025\071\027\055\030\060\031\075\054" +
    "\057\060\070\063\072\064\065\001\001\000\004\054\250" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\065" +
    "\231\066\027\067\032\070\022\071\020\072\033\073\030" +
    "\001\001\000\016\025\071\031\230\054\057\060\070\063" +
    "\072\064\065\001\001\000\004\054\203\001\001\000\004" +
    "\046\176\001\001\000\022\025\071\027\173\030\060\031" +
    "\075\054\057\060\070\063\072\064\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\054\106\057\107\001\001\000\004\046\076\001" +
    "\001\000\002\001\001\000\006\015\100\023\101\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\025\071\027" +
    "\102\030\060\031\075\054\057\060\070\063\072\064\065" +
    "\001\001\000\004\024\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\110\001\001\000\020\033\124\034\113\036\120\041" +
    "\123\042\114\054\117\061\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\141\037\131\040\152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\033\124\034\164\036\120\041" +
    "\123\054\117\001\001\000\004\062\160\001\001\000\002" +
    "\001\001\000\014\033\124\034\156\036\120\041\123\054" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\033\124\034\130\036\120\041\123\054\117\001\001\000" +
    "\002\001\001\000\010\035\141\037\131\040\152\001\001" +
    "\000\014\033\124\034\155\036\120\041\123\054\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\033\124\034\154\036\120\041\123" +
    "\054\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\124\034\153\036\120\041\123\054\117\001\001\000\010" +
    "\035\141\037\131\040\152\001\001\000\010\035\141\037" +
    "\131\040\152\001\001\000\010\035\141\037\131\040\152" +
    "\001\001\000\010\035\141\037\131\040\152\001\001\000" +
    "\002\001\001\000\020\033\124\034\113\036\120\041\123" +
    "\042\163\043\162\054\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\035\141\037\131" +
    "\040\152\001\001\000\026\023\166\025\071\027\167\030" +
    "\060\031\075\054\057\055\170\060\070\063\072\064\065" +
    "\001\001\000\022\025\071\027\171\030\060\031\075\054" +
    "\057\060\070\063\072\064\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\172\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\177\023\200\001\001\000\002\001\001\000" +
    "\022\025\071\027\201\030\060\031\075\054\057\060\070" +
    "\063\072\064\065\001\001\000\004\024\202\001\001\000" +
    "\002\001\001\000\004\020\204\001\001\000\002\001\001" +
    "\000\012\016\211\017\210\053\207\054\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\211\017\213\053\207\054\206\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\054\224" +
    "\001\001\000\004\056\222\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\226\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\025\244\033\124\034\113\036\120\041\123\042\241\054" +
    "\242\001\001\000\016\026\234\033\124\034\233\036\120" +
    "\041\123\054\117\001\001\000\010\035\141\037\131\040" +
    "\152\001\001\000\002\001\001\000\014\033\124\034\240" +
    "\036\120\041\123\054\117\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\035\141\037\131\040\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\074\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\044\257\053\255\054\206\001" +
    "\001\000\002\001\001\000\004\056\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\266\025\071\027\055\030\060\031\075" +
    "\054\057\060\070\063\072\064\065\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG2

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
  Type.buildTypes();
  SymbolTable.initialize();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG3
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;
  public static int errors = 0;
  public static StringBuffer code = new StringBuffer();

  public void report_error(String message, Object info){
    if (info instanceof String){
	  errors++;
      System.err.println("  "+ errors + "==> " + info + " "+ message +
							"near " + lexer.current_lexeme());
    } else {
      StringBuffer m = new StringBuffer("Error ");
      if (info instanceof java_cup.runtime.Symbol){
        m.append( "("+info.toString()+")" );
        m.append(" : "+message);
        System.err.println(m);
      }
    }
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

  public void checkEqualTypes(Type t1, Type t2){
    if (t1.equals(t2)){return;}
    report_error("Incompatible types. ", "ERROR");
  }

  public void checkCompatibleTypes(Type t1, Type t2){
    if (t1.equals(t2)){return;}
    if (t1.getVal().equals("integer") && t2.getVal().equals("real")){return;}
    if (t2.getVal().equals("integer") && t1.getVal().equals("real")){return;}
    report_error("Incompatible types ", "ERROR");
  }

  public Type checkRelationalExp(Type e1, Type e2, String op){
    if (op.equals("<>")){
      if (!(e1.equals(e2))){
        report_error("Incompatible types", "ERROR");
      }
    } else {
      checkCompatibleTypes(e1, e2);
    }
    return Type.getType("boolean");
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

//@@CUPDBG1

  class Exp {
    public Type type;
    public String code;
    public boolean isConstant;

    Exp(Type t, String code) {
      this(t, code, false);
    }

    Exp(Type t, String code, boolean cte) {
      type = t;
      this.code = code;
      isConstant = cte;
    }
  }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_def_part program_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_def ::= type_def_part variable_def_part header_declarations body_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_def ::= header_declarations variable_def_part body_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_def_part ::= PROGRAM identifier SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_def_part ::= TYPE identifier assign_operator LPAREN set_items RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // set_items ::= set_items COMMA set_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_items",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // set_items ::= set_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_items",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // set_item ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_item",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body_def_part ::= BEGIN stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // body_def_part ::= stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_def_part ::= stmt_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_def_list ::= stmt_def_list stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_def_list ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= attr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= for_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // for_designator ::= FOR control_variable equal_op initial_value direction final_value 
            {
              Object RESULT =null;
		Location cvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location cvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ivxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ivxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object iv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object fv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4

	SymbolImpl symbolTableCV = SymbolTable.get(cv.toString());
	if (symbolTableCV == null) {
		parser.report_error("Undeclared variable ", "ERROR");
	}
	Exp exIV = (Exp)iv;
	Exp exFV = (Exp)fv;
	parser.checkEqualTypes(exIV.type, Type.getType("integer"));
	parser.checkEqualTypes(exFV.type, Type.getType("integer"));
	parser.checkEqualTypes(symbolTableCV.getType(), Type.getType("integer"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_designator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // control_variable ::= identifier 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5

	RESULT = id.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_variable",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // initial_value ::= exp_part 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6

	Exp exp = (Exp)e;
	RESULT = exp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_value",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // direction ::= TO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direction",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // direction ::= DOWNTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direction",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // final_value ::= exp_part 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7

	Exp exp = (Exp)e;
	RESULT = exp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("final_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // for_def_part ::= for_designator DO for_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // for_stmt ::= block stmt_def_part block_end 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // for_stmt ::= stmt_def_part 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // for_def_part ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG8
parser.report_error("Error in for definition ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9

	RESULT = x;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // header_declarations ::= header_declarations procedure_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // header_declarations ::= header_declarations function_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // block ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // block_end ::= END SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_end",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedure_def_part ::= procedure_declaration variable_def_part procedure_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_def_part",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedure_declaration ::= PROCEDURE identifier parameters_list SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG10

	ProcedureType p = new ProcedureType();
	List<Type> l = (List<Type>)pl; 
	p.addParams(l);
	if (! SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, p))){
		parser.report_error("Duplicate name ", "ERROR");
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_def_part ::= function_declaration variable_def_part function_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_def_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_declaration ::= FUNCTION identifier parameters_list COLON type_def SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG11

	Type returnType = (Type)td;
	FunctionType p = new FunctionType(returnType);
	List<Type> l = (List<Type>)pl; 
	p.addParams(l);
	if (! SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, p))){
		parser.report_error("Duplicate name ", "ERROR");
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameters_list ::= LPAREN parameters RPAREN 
            {
              Object RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG12

	RESULT = p;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameters_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameter ::= identifier_list COLON type_def 
            {
              Object RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13

	List<Type> params = new ArrayList();
	for (String i: il){
		params.add((Type)t);
		if(! SymbolTable.insert(i.toLowerCase(), new SymbolImpl(i, (Type)t))){
			parser.report_error("Duplicate name ", "ERROR");
		}
	}
    RESULT = params;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameters ::= parameter SEMI parameters 
            {
              Object RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14

	List<Type> aux = (List)pl;
	aux.addAll((List<Type>)p);
	RESULT = aux;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameters ::= parameter 
            {
              Object RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15

	RESULT = p;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // call ::= identifier LPAREN args RPAREN SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG16

	SymbolImpl s = SymbolTable.get(id);	
	if (s == null) {
		parser.report_error("Undeclared function ", "ERROR");
	}
	List<Exp> arg_list = (List<Exp>)al;
	FunctionType f = (FunctionType)s.getType();
	for (int i=0; i < f.parameters.size(); i++){
		if (f.parameters.get(i) != arg_list.get(i).type){
			parser.report_error("Invalid parameter ", "ERROR");
		}
	}
	RESULT = f;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // args ::= exp 
            {
              Object RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17

	List<Exp> a = new ArrayList();
	Exp e = (Exp)ex;
	a.add(e);
	RESULT = a;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // args ::= args COMMA exp 
            {
              Object RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18

	Exp e = (Exp)ex;
	List<Exp> arg_list = (List<Exp>)a;
	arg_list.add(e);
	RESULT = arg_list;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_part ::= exp 
            {
              Object RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19

	Exp e = (Exp)ex;
	RESULT = new Exp(e.type, e.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= literal 
            {
              Object RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20

	Exp e;
    if (l instanceof Integer) {
		e = new Exp(Type.getType("integer"), String.valueOf(l));
	} else if (l instanceof Float){
		e = new Exp(Type.getType("real"), String.valueOf(l));
	} else if (l instanceof String) {
		e = new Exp(Type.getType("string"), String.valueOf(l));
	} else if (l instanceof Boolean) {
		e = new Exp(Type.getType("boolean"), String.valueOf(l));
	} else {
		parser.report_error("Unknown data type ", "ERROR");
		e = null;
	}
	RESULT = e;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= identifier 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21

	RESULT = new Exp(SymbolTable.get(id).getType(), id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp error 
            {
              Object RESULT =null;
		//@@CUPDBG22
 parser.report_error("Missing operand ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= bool_op exp 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23

	Exp ex1 = (Exp)e1;
	parser.checkCompatibleTypes(ex1.type, Type.getType("boolean"));
	RESULT = new Exp(Type.getType("boolean"), (String)op + ex1.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp log_op exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24

	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	parser.checkCompatibleTypes(ex1.type, Type.getType("boolean"));
	parser.checkCompatibleTypes(ex2.type, Type.getType("boolean"));
	RESULT = new Exp(Type.getType("boolean"), ex1.code + (String)op + ex2.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= un_arim_op exp 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25

	Exp ex1 = (Exp)e1;
	parser.checkCompatibleTypes(ex1.type, Type.getType("integer"));
	RESULT = new Exp(ex1.type, (String)op + ex1.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp bin_arim_op exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26

	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	parser.checkCompatibleTypes(ex1.type, ex2.type);
	RESULT = new Exp(Type.max(ex1.type, ex2.type), ex1.code + (String)op + ex2.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp rel_op exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27

	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	RESULT = new Exp(parser.checkRelationalExp(ex1.type, ex2.type, (String)op), ex1.code + (String)op + ex2.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG28

	Exp e = (Exp)ex;
	RESULT = new Exp(e.type, e.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29

	RESULT = il;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30

	RESULT = bl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String sl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31

	RESULT = sl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rel_op ::= GT 
            {
              Object RESULT =null;
		//@@CUPDBG32

    RESULT = ">";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rel_op ::= LT 
            {
              Object RESULT =null;
		//@@CUPDBG33

    RESULT = "<";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rel_op ::= GE 
            {
              Object RESULT =null;
		//@@CUPDBG34

    RESULT = ">=";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rel_op ::= LE 
            {
              Object RESULT =null;
		//@@CUPDBG35

    RESULT = "<=";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rel_op ::= DIFF 
            {
              Object RESULT =null;
		//@@CUPDBG36

    RESULT = "<>";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bool_op ::= NOT 
            {
              Object RESULT =null;
		//@@CUPDBG37

    RESULT = "not";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // log_op ::= AND 
            {
              Object RESULT =null;
		//@@CUPDBG38

    RESULT = "and";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // log_op ::= XOR 
            {
              Object RESULT =null;
		//@@CUPDBG39

    RESULT = "xor";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // log_op ::= OR 
            {
              Object RESULT =null;
		//@@CUPDBG40

    RESULT = "or";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bin_arim_op ::= PLUS 
            {
              Object RESULT =null;
		//@@CUPDBG41

    RESULT = "+";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bin_arim_op ::= MINUS 
            {
              Object RESULT =null;
		//@@CUPDBG42

    RESULT = "-";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bin_arim_op ::= TIMES 
            {
              Object RESULT =null;
		//@@CUPDBG43

    RESULT = "*";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bin_arim_op ::= DIVIDE 
            {
              Object RESULT =null;
		//@@CUPDBG44

    RESULT = "/";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bin_arim_op ::= MOD 
            {
              Object RESULT =null;
		//@@CUPDBG45

    RESULT = "mod";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // un_arim_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // un_arim_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variable_def_part ::= VAR variable_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variable_def_list ::= variable_def_list variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable_def_list ::= variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variable_def ::= identifier_list COLON type_def SEMI 
            {
              Object RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG46

	for (String id: il){
		if(!SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, (Type)td))) {
	        parser.report_error("Duplicated variable ", id);
	    }
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$0 ::= 
            {
              Object RESULT =null;
//@@CUPDBG47
 parser.report_error("","expected ';' before token"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variable_def ::= error NT$0 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // attr ::= identifier assign_operator exp_part SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG48

	Exp e = (Exp)ex;
    parser.checkCompatibleTypes(SymbolTable.get(id).getType(), e.type);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // attr ::= identifier assign_operator call 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49

	SymbolImpl s = SymbolTable.get(id.toLowerCase());
	if (s == null) {
		parser.report_error("Undeclared variable ", "ERROR");
	}
	FunctionType f = (FunctionType)c;
	parser.checkCompatibleTypes(s.getType(), f.returnType);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // attr ::= identifier assign_operator error 
            {
              Object RESULT =null;
		//@@CUPDBG50
 parser.report_error("Error in expression ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assign_operator ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG51
 parser.report_error("Expected symbol before = ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assign_operator ::= equal_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assign_operator ::= sum_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assign_operator ::= minus_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assign_operator ::= times_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assign_operator ::= divide_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assign_operator ::= only_equal_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // equal_op ::= COLON EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equal_op",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sum_op ::= PLUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sum_op",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // minus_op ::= MINUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_op",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // times_op ::= TIMES EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_op",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // divide_op ::= DIVIDE EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("divide_op",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // only_equal_op ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("only_equal_op",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // identifier_list ::= identifier_list COMMA identifier 
            {
              List<String> RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52

	il.add(id.toLowerCase());
	RESULT = il;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // identifier_list ::= identifier 
            {
              List<String> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53

	List<String> il = new ArrayList<String>();
   	il.add(id.toLowerCase());
   	RESULT = il;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // type_def ::= STRING 
            {
              Object RESULT =null;
		//@@CUPDBG54

	RESULT = Type.getType("string");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // type_def ::= BOOL 
            {
              Object RESULT =null;
		//@@CUPDBG55

	RESULT = Type.getType("boolean");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // type_def ::= INT 
            {
              Object RESULT =null;
		//@@CUPDBG56

	RESULT = Type.getType("integer");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type_def ::= REAL 
            {
              Object RESULT =null;
		//@@CUPDBG57

	RESULT = Type.getType("real");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // header_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // variable_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		Location rlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float rl = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG58

	RESULT = rl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		Location flxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location flxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG59

	RESULT = fl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
