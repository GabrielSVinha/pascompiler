
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import java.util.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.*;
import type.*;
import symbolTable.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\157\000\002\002\004\000\002\002\004\000\002\005" +
    "\006\000\002\005\004\000\002\003\005\000\002\007\011" +
    "\000\002\021\005\000\002\021\003\000\002\022\003\000" +
    "\002\074\002\000\002\004\007\000\002\075\002\000\002" +
    "\004\006\000\002\027\003\000\002\027\002\000\002\030" +
    "\004\000\002\030\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\063\010\000\002\057\003\000" +
    "\002\061\003\000\002\062\003\000\002\062\003\000\002" +
    "\043\003\000\002\076\002\000\002\060\006\000\002\055" +
    "\005\000\002\055\003\000\002\060\003\000\002\054\003" +
    "\000\002\006\004\000\002\006\004\000\002\023\003\000" +
    "\002\024\004\000\002\013\005\000\002\014\006\000\002" +
    "\015\005\000\002\010\005\000\002\012\010\000\002\011" +
    "\005\000\002\020\005\000\002\020\002\000\002\016\005" +
    "\000\002\017\005\000\002\017\003\000\002\025\007\000" +
    "\002\026\003\000\002\026\005\000\002\042\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\004\000\002\034" +
    "\004\000\002\034\005\000\002\034\004\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\041\003\000\002\041\003\000\002\046\004\000\002\045" +
    "\004\000\002\045\003\000\002\044\006\000\002\077\002" +
    "\000\002\044\005\000\002\064\006\000\002\064\005\000" +
    "\002\064\005\000\002\065\003\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\066\004\000\002\067\004" +
    "\000\002\070\004\000\002\071\004\000\002\072\004\000" +
    "\002\073\003\000\002\053\005\000\002\053\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\006\002\000\002\046\002\000\002\033\003" +
    "\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\004\046\006\001\002\000\004\002\272\001" +
    "\002\000\020\003\uff95\020\012\024\016\044\uff95\047\uff95" +
    "\050\uff95\053\uff95\001\002\000\004\044\010\001\002\000" +
    "\004\004\011\001\002\000\060\003\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\021" +
    "\uffe2\022\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2" +
    "\033\uffe2\034\uffe2\035\uffe2\042\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\001\002\000\020\003\ufffd\020\ufffd\024\ufffd\044\ufffd" +
    "\047\ufffd\050\ufffd\053\ufffd\001\002\000\006\003\260\044" +
    "\010\001\002\000\022\003\uff95\020\012\044\uff95\047\uff95" +
    "\050\uff95\051\uff95\052\uff95\053\uff95\001\002\000\014\003" +
    "\ufff6\044\ufff6\047\055\050\ufff6\053\ufff6\001\002\000\004" +
    "\002\000\001\002\000\004\044\010\001\002\000\020\003" +
    "\030\005\027\006\020\007\023\010\033\021\025\042\026" +
    "\001\002\000\004\042\052\001\002\000\026\003\uffa5\005" +
    "\uffa5\006\uffa5\011\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\032\uffa5\044\uffa5\001\002\000\004\011\042\001\002\000" +
    "\004\042\041\001\002\000\026\003\uffa6\005\uffa6\006\uffa6" +
    "\011\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\032\uffa6\044" +
    "\uffa6\001\002\000\004\042\040\001\002\000\026\003\uff9d" +
    "\005\uff9d\006\uff9d\011\uff9d\014\uff9d\015\uff9d\016\uff9d\017" +
    "\uff9d\032\uff9d\044\uff9d\001\002\000\004\042\037\001\002" +
    "\000\026\003\uffa9\005\uffa9\006\uffa9\011\uffa9\014\uffa9\015" +
    "\uffa9\016\uffa9\017\uffa9\032\uffa9\044\uffa9\001\002\000\026" +
    "\003\uffa8\005\uffa8\006\uffa8\011\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\017\uffa8\032\uffa8\044\uffa8\001\002\000\026\003\uffa3" +
    "\005\uffa3\006\uffa3\011\uffa3\014\uffa3\015\uffa3\016\uffa3\017" +
    "\uffa3\032\uffa3\044\uffa3\001\002\000\004\042\036\001\002" +
    "\000\026\003\uffa7\005\uffa7\006\uffa7\011\uffa7\014\uffa7\015" +
    "\uffa7\016\uffa7\017\uffa7\032\uffa7\044\uffa7\001\002\000\026" +
    "\003\uffa4\005\uffa4\006\uffa4\011\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\017\uffa4\032\uffa4\044\uffa4\001\002\000\026\003\uff9f" +
    "\005\uff9f\006\uff9f\011\uff9f\014\uff9f\015\uff9f\016\uff9f\017" +
    "\uff9f\032\uff9f\044\uff9f\001\002\000\026\003\uffa1\005\uffa1" +
    "\006\uffa1\011\uffa1\014\uffa1\015\uffa1\016\uffa1\017\uffa1\032" +
    "\uffa1\044\uffa1\001\002\000\026\003\uffa2\005\uffa2\006\uffa2" +
    "\011\uffa2\014\uffa2\015\uffa2\016\uffa2\017\uffa2\032\uffa2\044" +
    "\uffa2\001\002\000\026\003\uff9e\005\uff9e\006\uff9e\011\uff9e" +
    "\014\uff9e\015\uff9e\016\uff9e\017\uff9e\032\uff9e\044\uff9e\001" +
    "\002\000\004\044\010\001\002\000\006\012\ufffa\022\ufffa" +
    "\001\002\000\006\012\ufff9\022\ufff9\001\002\000\006\012" +
    "\047\022\046\001\002\000\004\044\010\001\002\000\004" +
    "\004\050\001\002\000\022\003\ufffc\020\ufffc\044\ufffc\047" +
    "\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\001\002\000\006" +
    "\012\ufffb\022\ufffb\001\002\000\026\003\uffa0\005\uffa0\006" +
    "\uffa0\011\uffa0\014\uffa0\015\uffa0\016\uffa0\017\uffa0\032\uffa0" +
    "\044\uffa0\001\002\000\012\003\066\044\010\050\ufff3\053" +
    "\057\001\002\000\004\002\ufffe\001\002\000\012\003\ufff8" +
    "\044\ufff8\050\ufff8\053\ufff8\001\002\000\012\003\066\044" +
    "\010\050\ufff3\053\057\001\002\000\004\044\010\001\002" +
    "\000\012\003\066\044\010\050\ufff4\053\057\001\002\000" +
    "\012\003\ufff1\044\ufff1\050\ufff1\053\ufff1\001\002\000\012" +
    "\003\uffef\044\uffef\050\uffef\053\uffef\001\002\000\004\056" +
    "\uffe7\001\002\000\022\003\030\005\027\006\020\007\023" +
    "\010\033\011\074\021\025\042\026\001\002\000\012\003" +
    "\ufff0\044\ufff0\050\ufff0\053\ufff0\001\002\000\012\003\uffe3" +
    "\044\uffe3\050\uffe3\053\uffe3\001\002\000\004\050\071\001" +
    "\002\000\012\003\uffee\044\uffee\050\uffee\053\uffee\001\002" +
    "\000\004\043\072\001\002\000\004\002\ufff7\001\002\000" +
    "\026\003\152\005\101\006\075\011\111\014\112\015\105" +
    "\016\076\017\100\032\110\044\010\001\002\000\024\005" +
    "\101\006\075\011\111\014\112\015\105\016\076\017\100" +
    "\032\110\044\010\001\002\000\024\005\uffb3\006\uffb3\011" +
    "\uffb3\014\uffb3\015\uffb3\016\uffb3\017\uffb3\032\uffb3\044\uffb3" +
    "\001\002\000\052\003\uffc4\004\uffc4\005\uffc4\006\uffc4\007" +
    "\uffc4\010\uffc4\012\uffc4\013\uffc4\022\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\031\uffc4\033\uffc4\034\uffc4\035\uffc4\054" +
    "\uffc4\055\uffc4\056\uffc4\001\002\000\042\003\132\005\121" +
    "\006\131\007\127\010\114\012\uffd1\013\116\022\uffd1\025" +
    "\125\026\120\027\126\030\130\031\134\033\117\034\122" +
    "\035\133\001\002\000\052\003\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\012\uffc3\013\uffc3\022\uffc3\025\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3\035" +
    "\uffc3\054\uffc3\055\uffc3\056\uffc3\001\002\000\024\005\uffb4" +
    "\006\uffb4\011\uffb4\014\uffb4\015\uffb4\016\uffb4\017\uffb4\032" +
    "\uffb4\044\uffb4\001\002\000\052\003\uffcd\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\012\uffcd\013\uffcd\022\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\054\uffcd\055\uffcd\056\uffcd\001\002\000\006\012" +
    "\144\022\143\001\002\000\024\005\101\006\075\011\111" +
    "\014\112\015\105\016\076\017\100\032\110\044\010\001" +
    "\002\000\052\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\012\uff94\013\uff94\022\uff94\025\uff94\026\uff94\027" +
    "\uff94\030\uff94\031\uff94\033\uff94\034\uff94\035\uff94\054\uff94" +
    "\055\uff94\056\uff94\001\002\000\024\005\101\006\075\011" +
    "\111\014\112\015\105\016\076\017\100\032\110\044\010" +
    "\001\002\000\052\003\uffce\004\uffce\005\uffce\006\uffce\007" +
    "\uffce\010\uffce\012\uffce\013\uffce\022\uffce\025\uffce\026\uffce" +
    "\027\uffce\030\uffce\031\uffce\033\uffce\034\uffce\035\uffce\054" +
    "\uffce\055\uffce\056\uffce\001\002\000\024\005\uffbd\006\uffbd" +
    "\011\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\032\uffbd\044" +
    "\uffbd\001\002\000\024\005\101\006\075\011\111\014\112" +
    "\015\105\016\076\017\100\032\110\044\010\001\002\000" +
    "\052\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5" +
    "\012\uffc5\013\uffc5\022\uffc5\025\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\054\uffc5\055\uffc5" +
    "\056\uffc5\001\002\000\040\003\132\005\121\006\131\007" +
    "\127\010\114\012\123\013\116\025\125\026\120\027\126" +
    "\030\130\031\134\033\117\034\122\035\133\001\002\000" +
    "\024\005\uffb7\006\uffb7\011\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\017\uffb7\032\uffb7\044\uffb7\001\002\000\024\005\101\006" +
    "\075\011\111\014\112\015\105\016\076\017\100\032\110" +
    "\044\010\001\002\000\024\005\uffb5\006\uffb5\011\uffb5\014" +
    "\uffb5\015\uffb5\016\uffb5\017\uffb5\032\uffb5\044\uffb5\001\002" +
    "\000\024\005\uffbc\006\uffbc\011\uffbc\014\uffbc\015\uffbc\016" +
    "\uffbc\017\uffbc\032\uffbc\044\uffbc\001\002\000\024\005\uffc1" +
    "\006\uffc1\011\uffc1\014\uffc1\015\uffc1\016\uffc1\017\uffc1\032" +
    "\uffc1\044\uffc1\001\002\000\024\005\uffb9\006\uffb9\011\uffb9" +
    "\014\uffb9\015\uffb9\016\uffb9\017\uffb9\032\uffb9\044\uffb9\001" +
    "\002\000\024\005\uffba\006\uffba\011\uffba\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\032\uffba\044\uffba\001\002\000\052\003" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6" +
    "\013\uffc6\022\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031" +
    "\uffc6\033\uffc6\034\uffc6\035\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\001\002\000\024\005\101\006\075\011\111\014\112\015" +
    "\105\016\076\017\100\032\110\044\010\001\002\000\024" +
    "\005\uffc2\006\uffc2\011\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\032\uffc2\044\uffc2\001\002\000\024\005\uffbf\006\uffbf" +
    "\011\uffbf\014\uffbf\015\uffbf\016\uffbf\017\uffbf\032\uffbf\044" +
    "\uffbf\001\002\000\024\005\uffb6\006\uffb6\011\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\032\uffb6\044\uffb6\001\002\000" +
    "\024\005\uffc0\006\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\032\uffc0\044\uffc0\001\002\000\024\005\uffb8\006" +
    "\uffb8\011\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8\032\uffb8" +
    "\044\uffb8\001\002\000\052\003\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc\022\uffcc\025\uffcc" +
    "\026\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\035" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002\000\024\005\uffbb" +
    "\006\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\032" +
    "\uffbb\044\uffbb\001\002\000\024\005\uffbe\006\uffbe\011\uffbe" +
    "\014\uffbe\015\uffbe\016\uffbe\017\uffbe\032\uffbe\044\uffbe\001" +
    "\002\000\024\005\101\006\075\011\111\014\112\015\105" +
    "\016\076\017\100\032\110\044\010\001\002\000\052\003" +
    "\132\004\uffc8\005\121\006\131\007\127\010\114\012\uffc8" +
    "\013\116\022\uffc8\025\125\026\120\027\126\030\130\031" +
    "\134\033\117\034\122\035\133\054\uffc8\055\uffc8\056\uffc8" +
    "\001\002\000\052\003\132\004\uffc7\005\121\006\131\007" +
    "\127\010\114\012\uffc7\013\116\022\uffc7\025\125\026\120" +
    "\027\126\030\130\031\134\033\117\034\122\035\133\054" +
    "\uffc7\055\uffc7\056\uffc7\001\002\000\052\003\132\004\uffca" +
    "\005\121\006\131\007\127\010\114\012\uffca\013\116\022" +
    "\uffca\025\125\026\120\027\126\030\130\031\134\033\117" +
    "\034\122\035\133\054\uffca\055\uffca\056\uffca\001\002\000" +
    "\052\003\132\004\uffc9\005\121\006\131\007\127\010\114" +
    "\012\uffc9\013\116\022\uffc9\025\125\026\120\027\126\030" +
    "\130\031\134\033\117\034\122\035\133\054\uffc9\055\uffc9" +
    "\056\uffc9\001\002\000\052\003\132\004\uffcb\005\121\006" +
    "\131\007\127\010\114\012\uffcb\013\116\022\uffcb\025\125" +
    "\026\120\027\126\030\130\031\134\033\117\034\122\035" +
    "\133\054\uffcb\055\uffcb\056\uffcb\001\002\000\024\005\101" +
    "\006\075\011\111\014\112\015\105\016\076\017\100\032" +
    "\110\044\010\001\002\000\004\004\145\001\002\000\012" +
    "\003\uffd2\044\uffd2\050\uffd2\053\uffd2\001\002\000\042\003" +
    "\132\005\121\006\131\007\127\010\114\012\uffd0\013\116" +
    "\022\uffd0\025\125\026\120\027\126\030\130\031\134\033" +
    "\117\034\122\035\133\001\002\000\046\003\132\004\uffcf" +
    "\005\121\006\131\007\127\010\114\013\116\025\125\026" +
    "\120\027\126\030\130\031\134\033\117\034\122\035\133" +
    "\054\uffcf\055\uffcf\056\uffcf\001\002\000\004\004\154\001" +
    "\002\000\042\003\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd" +
    "\010\uffcd\011\074\013\uffcd\025\uffcd\026\uffcd\027\uffcd\030" +
    "\uffcd\031\uffcd\033\uffcd\034\uffcd\035\uffcd\001\002\000\012" +
    "\003\uffaa\044\uffaa\050\uffaa\053\uffaa\001\002\000\012\003" +
    "\uffab\044\uffab\050\uffab\053\uffab\001\002\000\012\003\uffac" +
    "\044\uffac\050\uffac\053\uffac\001\002\000\004\056\156\001" +
    "\002\000\014\003\066\044\010\047\161\050\ufff3\053\057" +
    "\001\002\000\012\003\066\044\010\050\ufff3\053\057\001" +
    "\002\000\012\003\uffe4\044\uffe4\050\uffe4\053\uffe4\001\002" +
    "\000\012\003\uffdf\044\uffdf\050\uffdf\053\uffdf\001\002\000" +
    "\012\003\uffe6\044\uffe6\050\uffe6\053\uffe6\001\002\000\004" +
    "\050\165\001\002\000\012\003\uffe5\044\uffe5\050\uffe5\053" +
    "\uffe5\001\002\000\004\004\166\001\002\000\020\003\uffde" +
    "\044\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\001" +
    "\002\000\012\003\ufff2\044\ufff2\050\ufff2\053\ufff2\001\002" +
    "\000\004\021\uffec\001\002\000\004\021\025\001\002\000" +
    "\024\005\101\006\075\011\111\014\112\015\105\016\076" +
    "\017\100\032\110\044\010\001\002\000\006\054\uffeb\055" +
    "\uffeb\001\002\000\006\054\175\055\177\001\002\000\024" +
    "\005\uffea\006\uffea\011\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\032\uffea\044\uffea\001\002\000\024\005\101\006\075" +
    "\011\111\014\112\015\105\016\076\017\100\032\110\044" +
    "\010\001\002\000\024\005\uffe9\006\uffe9\011\uffe9\014\uffe9" +
    "\015\uffe9\016\uffe9\017\uffe9\032\uffe9\044\uffe9\001\002\000" +
    "\004\056\uffed\001\002\000\004\056\uffe8\001\002\000\004" +
    "\050\203\001\002\000\004\043\204\001\002\000\004\002" +
    "\ufff5\001\002\000\020\003\uff96\044\uff96\047\uff96\050\uff96" +
    "\051\uff96\052\uff96\053\uff96\001\002\000\020\003\ufff6\044" +
    "\ufff6\047\055\050\ufff6\051\212\052\215\053\ufff6\001\002" +
    "\000\020\003\uffe1\044\uffe1\047\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\053\uffe1\001\002\000\006\020\012\047\uff95\001\002" +
    "\000\004\002\uffff\001\002\000\004\044\010\001\002\000" +
    "\020\003\uffe0\044\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0" +
    "\053\uffe0\001\002\000\006\020\012\047\uff95\001\002\000" +
    "\004\044\010\001\002\000\006\011\220\021\uffd6\001\002" +
    "\000\004\021\240\001\002\000\004\044\010\001\002\000" +
    "\006\021\uff9b\022\uff9b\001\002\000\006\021\231\022\230" +
    "\001\002\000\004\012\227\001\002\000\006\004\225\012" +
    "\uffd3\001\002\000\004\044\010\001\002\000\004\012\uffd4" +
    "\001\002\000\006\004\uffd7\021\uffd7\001\002\000\004\044" +
    "\010\001\002\000\012\036\234\037\236\040\232\041\233" +
    "\001\002\000\006\004\uff9a\012\uff9a\001\002\000\006\004" +
    "\uff97\012\uff97\001\002\000\006\004\uff99\012\uff99\001\002" +
    "\000\006\004\uffd5\012\uffd5\001\002\000\006\004\uff98\012" +
    "\uff98\001\002\000\006\021\uff9c\022\uff9c\001\002\000\012" +
    "\036\234\037\236\040\232\041\233\001\002\000\004\004" +
    "\242\001\002\000\006\020\uffd9\047\uffd9\001\002\000\004" +
    "\047\161\001\002\000\020\003\uffdd\044\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\052\uffdd\053\uffdd\001\002\000\012\003\066" +
    "\044\010\050\ufff3\053\057\001\002\000\004\050\165\001" +
    "\002\000\020\003\uffdb\044\uffdb\047\uffdb\050\uffdb\051\uffdb" +
    "\052\uffdb\053\uffdb\001\002\000\006\004\uffd6\011\220\001" +
    "\002\000\004\004\252\001\002\000\006\020\uffdc\047\uffdc" +
    "\001\002\000\004\047\161\001\002\000\020\003\uffda\044" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\001\002" +
    "\000\012\003\066\044\010\050\ufff3\053\057\001\002\000" +
    "\004\050\165\001\002\000\020\003\uffd8\044\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\001\002\000\004\004" +
    "\uffae\001\002\000\020\003\uffb0\044\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\001\002\000\006\021\265\022" +
    "\230\001\002\000\020\003\260\044\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\052\uffb2\053\uffb2\001\002\000\020\003\uffb1\044" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\001\002" +
    "\000\012\036\234\037\236\040\232\041\233\001\002\000" +
    "\004\004\267\001\002\000\020\003\uffaf\044\uffaf\047\uffaf" +
    "\050\uffaf\051\uffaf\052\uffaf\053\uffaf\001\002\000\004\004" +
    "\271\001\002\000\020\003\uffad\044\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\270\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\005\014\007\012\046\013\001\001\000\004" +
    "\054\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\044\260\045\262\053\261\054\220" +
    "\001\001\000\004\046\204\001\001\000\006\004\053\075" +
    "\052\001\001\000\002\001\001\000\004\054\016\001\001" +
    "\000\020\065\021\066\030\067\033\070\023\071\020\072" +
    "\034\073\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\044\022\042\054\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\022\050\054" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\025\067\027\201\030" +
    "\057\031\060\054\063\060\061\063\062\064\064\001\001" +
    "\000\002\001\001\000\004\074\055\001\001\000\022\025" +
    "\067\027\066\030\057\031\060\054\063\060\061\063\062" +
    "\064\064\001\001\000\006\054\167\057\170\001\001\000" +
    "\016\025\067\031\166\054\063\060\061\063\062\064\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\076" +
    "\154\001\001\000\020\065\072\066\030\067\033\070\023" +
    "\071\020\072\034\073\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\025\152\033\106\034" +
    "\146\036\103\041\105\042\147\054\150\001\001\000\016" +
    "\026\102\033\106\034\076\036\103\041\105\054\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\035\123" +
    "\037\114\040\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\033\106" +
    "\034\141\036\103\041\105\054\101\001\001\000\002\001" +
    "\001\000\014\033\106\034\140\036\103\041\105\054\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\033" +
    "\106\034\112\036\103\041\105\054\101\001\001\000\002" +
    "\001\001\000\010\035\123\037\114\040\134\001\001\000" +
    "\002\001\001\000\014\033\106\034\137\036\103\041\105" +
    "\054\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\033\106\034\136\036\103\041\105\054" +
    "\101\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\033\106" +
    "\034\135\036\103\041\105\054\101\001\001\000\010\035" +
    "\123\037\114\040\134\001\001\000\010\035\123\037\114" +
    "\040\134\001\001\000\010\035\123\037\114\040\134\001" +
    "\001\000\010\035\123\037\114\040\134\001\001\000\010" +
    "\035\123\037\114\040\134\001\001\000\014\033\106\034" +
    "\145\036\103\041\105\054\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\035\123\037\114\040\134\001" +
    "\001\000\010\035\123\037\114\040\134\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\023\156" +
    "\025\067\027\157\030\057\031\060\054\063\055\161\060" +
    "\061\063\062\064\064\001\001\000\022\025\067\027\162" +
    "\030\057\031\060\054\063\060\061\063\062\064\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\066\171\001\001\000\020\033\106\034\146\036" +
    "\103\041\105\042\172\054\101\061\173\001\001\000\002" +
    "\001\001\000\004\062\175\001\001\000\002\001\001\000" +
    "\020\033\106\034\146\036\103\041\105\042\200\043\177" +
    "\054\101\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\205\001\001\000\016\004\210\010" +
    "\212\012\207\013\206\014\213\075\052\001\001\000\002" +
    "\001\001\000\004\046\252\001\001\000\002\001\001\000" +
    "\004\054\247\001\001\000\002\001\001\000\004\046\242" +
    "\001\001\000\004\054\215\001\001\000\004\020\216\001" +
    "\001\000\002\001\001\000\012\016\223\017\222\053\221" +
    "\054\220\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\223\017\225" +
    "\053\221\054\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\054\236\001\001\000\004\056\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\243\023\244\001\001\000\002\001\001\000\022" +
    "\025\067\027\245\030\057\031\060\054\063\060\061\063" +
    "\062\064\064\001\001\000\004\024\246\001\001\000\002" +
    "\001\001\000\004\020\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\253\023\254\001\001\000\002" +
    "\001\001\000\022\025\067\027\255\030\057\031\060\054" +
    "\063\060\061\063\062\064\064\001\001\000\004\024\256" +
    "\001\001\000\002\001\001\000\004\077\267\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\044\263\053\261" +
    "\054\220\001\001\000\002\001\001\000\004\056\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG2

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
  Type.buildTypes();
  SymbolTable.initialize();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG3
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;
  public static int errors = 0;
  public static StringBuffer code = new StringBuffer();
  public int labels = 0;
  public List<String> label_stack = new ArrayList();

  public void report_error(String message, Object info){
    if (info instanceof String){
	  errors++;
      System.err.println("  "+ errors + "==> " + info + " "+ message +
							"near " + lexer.current_lexeme());
    } else {
      StringBuffer m = new StringBuffer("Error ");
      if (info instanceof java_cup.runtime.Symbol){
        m.append( "("+info.toString()+")" );
        m.append(" : "+message);
        System.err.println(m);
      }
    }
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

  public void checkEqualTypes(Type t1, Type t2){
    if (t1.equals(t2)){return;}
    report_error("Incompatible types. ", "ERROR");
  }

  public void checkCompatibleTypes(Type t1, Type t2){
    if (t1.equals(t2)){return;}
    if (t1.getVal().equals("integer") && t2.getVal().equals("real")){return;}
    if (t2.getVal().equals("integer") && t1.getVal().equals("real")){return;}
    report_error("Incompatible types ", "ERROR");
  }

  public String assemblyOperation(String op){
    if(op.equals("-")) {
	  return "SUB";
	}
	else if(op.equals("+")) {
	  return "ADD";
	}
	else if(op.equals("*")) {
	  return "MUL";
	} else if(op.equals("and")) {
	  return "AND";
	} else if(op.equals("OR")) {
	  return "OR";
	} else if(op.equals("XOR")) {
	  return "XOR";
	}

	else if(op.equals("/") || op.toLowerCase().equals("div")) {
	  return "DIV";
	}
    return "";
  }

  public Type checkRelationalExp(Type e1, Type e2, String op){
    if (op.equals("<>")){
      if (!(e1.equals(e2))){
        report_error("Incompatible types", "ERROR");
      }
    } else {
      checkCompatibleTypes(e1, e2);
    }
    return Type.getType("boolean");
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

//@@CUPDBG1

  class Exp {
    public Type type;
    public String code;
    public boolean isConstant;

    Exp(Type t, String code) {
      this(t, code, false);
    }

    Exp(Type t, String code, boolean cte) {
      type = t;
      this.code = code;
      isConstant = cte;
    }
  }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_def_part program_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_def ::= type_def_part variable_def_part header_declarations body_def_part 
            {
              Object RESULT =null;
		//@@CUPDBG4
parser.code.append("\t HALT\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_def ::= variable_def_part body_def_part 
            {
              Object RESULT =null;
		//@@CUPDBG5
parser.code.append("\t HALT\n");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_def_part ::= PROGRAM identifier SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG6

	parser.code.append("; Codigo assembly simples para "+id+".\n"); 
	parser.code.append("; Os registradores R0...Rn sao argumentos de funcoes/procedimentos.\n");
	parser.code.append("; O registrador V0 guarda retorno de funcoes.\n");
	parser.code.append("; O registrador SP sala a pilha de execucao.\n\n"); 
	parser.code.append("\t LD SP , #stackStart\n"); 
	parser.code.append("\t BR main \n"); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_def_part ::= TYPE identifier assign_operator LPAREN set_items RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // set_items ::= set_items COMMA set_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_items",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // set_items ::= set_item 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_items",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // set_item ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("set_item",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Object RESULT =null;
//@@CUPDBG7

	parser.code.append("main: \n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // body_def_part ::= BEGIN NT$0 stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              Object RESULT =null;
//@@CUPDBG8

	parser.code.append("main: \n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // body_def_part ::= NT$1 stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt_def_part ::= stmt_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt_def_list ::= stmt_def_list stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt_def_list ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= attr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= for_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for_designator ::= FOR control_variable equal_op initial_value direction final_value 
            {
              Object RESULT =null;
		Location cvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location cvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ivxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ivxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object iv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location dirxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location dirxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object dir = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location fvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object fv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9

	SymbolImpl symbolTableCV = SymbolTable.get(cv.toString());
	if (symbolTableCV == null) {
		parser.report_error("Undeclared variable ", "ERROR");
	}
	Exp exIV = (Exp)iv;
	Exp exFV = (Exp)fv;
	parser.checkEqualTypes(exIV.type, Type.getType("integer"));
	parser.checkEqualTypes(exFV.type, Type.getType("integer"));
	parser.checkEqualTypes(symbolTableCV.getType(), Type.getType("integer"));
	List<String> res = new ArrayList();
	res.add(cv.toString());
	res.add(dir.toString());
	res.add(exIV.code);
	res.add(exFV.code);
	RESULT = res;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_designator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // control_variable ::= identifier 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG10

	RESULT = id.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_variable",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // initial_value ::= exp_part 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG11

	Exp exp = (Exp)e;
	RESULT = exp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_value",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // direction ::= TO 
            {
              Object RESULT =null;
		//@@CUPDBG12
RESULT = "TO";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direction",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // direction ::= DOWNTO 
            {
              Object RESULT =null;
		//@@CUPDBG13
RESULT = "DOWNTO";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direction",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // final_value ::= exp_part 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14

	Exp exp = (Exp)e;
	RESULT = exp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("final_value",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT =null;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
//@@CUPDBG15

	List<String> l = (List<String>)fd;
	parser.code.append("\t ST "+l.get(0)+", "+l.get(2)+"\n");
	parser.code.append("L"+parser.labels+":");
	parser.label_stack.add("L"+parser.labels);
	parser.labels += 1;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // for_def_part ::= for_designator NT$2 DO for_stmt 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location fdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		//@@CUPDBG16

	List<String> l = (List<String>)fd;
	parser.code.append("\t LD R0, "+l.get(0)+"\n");
	if(l.get(1).equals("TO")){
		parser.code.append("\t ADD R0, R0, 1\n");
		parser.code.append("\t ST "+l.get(0)+", R0\n");
		parser.code.append("\t SUB R0, R0, "+l.get(3)+"\n");
		parser.code.append("\t BLTZ "+parser.label_stack.remove(parser.label_stack.size()-1)+", R0\n");
	} else {
		parser.code.append("\t SUB R0, R0, 1\n");
		parser.code.append("\t ST "+l.get(0)+", R0\n");
		parser.code.append("\t SUB R0, R0, "+l.get(3)+"\n");
		parser.code.append("\t BGTZ "+parser.label_stack.remove(parser.label_stack.size()-1)+", R0\n");
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // for_stmt ::= block stmt_def_part block_end 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // for_stmt ::= stmt_def_part 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // for_def_part ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG17
parser.report_error("Error in for definition ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18

	RESULT = x;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // header_declarations ::= header_declarations procedure_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // header_declarations ::= header_declarations function_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // block ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // block_end ::= END SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_end",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // procedure_def_part ::= procedure_declaration variable_def_part procedure_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_def_part",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // procedure_declaration ::= PROCEDURE identifier parameters_list SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG19

	ProcedureType p = new ProcedureType();
	List<Type> l = (List<Type>)pl; 
	p.addParams(l);
	if (! SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, p))){
		parser.report_error("Duplicate name ", "ERROR");
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // procedure_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // function_def_part ::= function_declaration variable_def_part function_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_def_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // function_declaration ::= FUNCTION identifier parameters_list COLON type_def SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG20

	Type returnType = (Type)td;
	FunctionType p = new FunctionType(returnType);
	List<Type> l = (List<Type>)pl; 
	p.addParams(l);
	if (! SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, p))){
		parser.report_error("Duplicate name ", "ERROR");
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameters_list ::= LPAREN parameters RPAREN 
            {
              Object RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG21

	RESULT = p;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parameters_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parameter ::= identifier_list COLON type_def 
            {
              Object RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG22

	List<Type> params = new ArrayList();
	for (String i: il){
		params.add((Type)t);
		if(! SymbolTable.insert(i.toLowerCase(), new SymbolImpl(i, (Type)t))){
			parser.report_error("Duplicate name ", "ERROR");
		}
	}
    RESULT = params;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parameters ::= parameter SEMI parameters 
            {
              Object RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23

	List<Type> aux = (List)pl;
	aux.addAll((List<Type>)p);
	RESULT = aux;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parameters ::= parameter 
            {
              Object RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24

	RESULT = p;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // call ::= identifier LPAREN args RPAREN SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG25

	SymbolImpl s = SymbolTable.get(id);	
	if (s == null) {
		parser.report_error("Undeclared function ", "ERROR");
	}
	List<Exp> arg_list = (List<Exp>)al;
	FunctionType f = (FunctionType)s.getType();
	for (int i=0; i < f.parameters.size(); i++){
		if (f.parameters.get(i) != arg_list.get(i).type){
			parser.report_error("Invalid parameter ", "ERROR");
		}
	}
	RESULT = f;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // args ::= exp 
            {
              Object RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26

	List<Exp> a = new ArrayList();
	Exp e = (Exp)ex;
	a.add(e);
	RESULT = a;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // args ::= args COMMA exp 
            {
              Object RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27

	Exp e = (Exp)ex;
	List<Exp> arg_list = (List<Exp>)a;
	arg_list.add(e);
	RESULT = arg_list;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp_part ::= exp 
            {
              Object RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG28

	Exp e = (Exp)ex;
	RESULT = new Exp(e.type, e.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= literal 
            {
              Object RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29

	Exp e;
    if (l instanceof Integer) {
		e = new Exp(Type.getType("integer"), String.valueOf(l));
	} else if (l instanceof Float){
		e = new Exp(Type.getType("real"), String.valueOf(l));
	} else if (l instanceof String) {
		e = new Exp(Type.getType("string"), String.valueOf(l));
	} else if (l instanceof Boolean) {
		e = new Exp(Type.getType("boolean"), String.valueOf(l));
	} else {
		parser.report_error("Unknown data type ", "ERROR");
		e = null;
	}
	RESULT = e;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= identifier 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30

	parser.code.append("\t LD R2, "+id+"\n"); // change register in every id
	RESULT = new Exp(SymbolTable.get(id).getType(), "R2");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= exp error 
            {
              Object RESULT =null;
		//@@CUPDBG31
 parser.report_error("Missing operand ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= bool_op exp 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG32

	Exp ex1 = (Exp)e1;
	parser.checkCompatibleTypes(ex1.type, Type.getType("boolean"));
	parser.code.append("\t NOT R1, "+ex1.code+"\n");
	RESULT = new Exp(Type.getType("boolean"), "R1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp log_op exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG33

	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	parser.checkCompatibleTypes(ex1.type, Type.getType("boolean"));
	parser.checkCompatibleTypes(ex2.type, Type.getType("boolean"));
	parser.code.append("\t "+parser.assemblyOperation(op.toString())+" R1, "+ex1.code+", "+ex2.code+"\n");
	RESULT = new Exp(Type.getType("boolean"), "R1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= un_arim_op exp 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG34

	Exp ex1 = (Exp)e1;
	parser.checkCompatibleTypes(ex1.type, Type.getType("integer"));
	parser.code.append("\t "+parser.assemblyOperation(op.toString())+" R1, "+ex1.code+", 0\n");
	RESULT = new Exp(ex1.type, "R1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= exp bin_arim_op exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG35

	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	parser.checkCompatibleTypes(ex1.type, ex2.type);
	parser.code.append("\t "+parser.assemblyOperation(op.toString())+" R1, "+ex1.code+", "+ex2.code+"\n");

	RESULT = new Exp(Type.max(ex1.type, ex2.type), "R1");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= exp rel_op exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG36

	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	parser.code.append("\t "+parser.assemblyOperation(op.toString())+" R1, "+ex1.code+", "+ex2.code+"\n");
	RESULT = new Exp(parser.checkRelationalExp(ex1.type, ex2.type, (String)op), ex1.code + (String)op + ex2.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG37

	Exp e = (Exp)ex;
	RESULT = new Exp(e.type, e.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG38

	RESULT = il;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG39

	RESULT = bl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String sl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG40

	RESULT = sl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rel_op ::= GT 
            {
              Object RESULT =null;
		//@@CUPDBG41

    RESULT = ">";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rel_op ::= LT 
            {
              Object RESULT =null;
		//@@CUPDBG42

    RESULT = "<";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rel_op ::= GE 
            {
              Object RESULT =null;
		//@@CUPDBG43

    RESULT = ">=";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // rel_op ::= LE 
            {
              Object RESULT =null;
		//@@CUPDBG44

    RESULT = "<=";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // rel_op ::= DIFF 
            {
              Object RESULT =null;
		//@@CUPDBG45

    RESULT = "<>";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bool_op ::= NOT 
            {
              Object RESULT =null;
		//@@CUPDBG46

    RESULT = "not";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // log_op ::= AND 
            {
              Object RESULT =null;
		//@@CUPDBG47

    RESULT = "and";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // log_op ::= XOR 
            {
              Object RESULT =null;
		//@@CUPDBG48

    RESULT = "xor";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // log_op ::= OR 
            {
              Object RESULT =null;
		//@@CUPDBG49

    RESULT = "or";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bin_arim_op ::= PLUS 
            {
              Object RESULT =null;
		//@@CUPDBG50

    RESULT = "+";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bin_arim_op ::= MINUS 
            {
              Object RESULT =null;
		//@@CUPDBG51

    RESULT = "-";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bin_arim_op ::= TIMES 
            {
              Object RESULT =null;
		//@@CUPDBG52

    RESULT = "*";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // bin_arim_op ::= DIVIDE 
            {
              Object RESULT =null;
		//@@CUPDBG53

    RESULT = "/";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // bin_arim_op ::= MOD 
            {
              Object RESULT =null;
		//@@CUPDBG54

    RESULT = "mod";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // un_arim_op ::= PLUS 
            {
              Object RESULT =null;
		//@@CUPDBG55

	RESULT = "+";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // un_arim_op ::= MINUS 
            {
              Object RESULT =null;
		//@@CUPDBG56

	RESULT = "-";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variable_def_part ::= VAR variable_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variable_def_list ::= variable_def_list variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variable_def_list ::= variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // variable_def ::= identifier_list COLON type_def SEMI 
            {
              Object RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG57

	for (String id: il){
		if(!SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, (Type)td))) {
	        parser.report_error("Duplicated variable ", id);
	    }
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$3 ::= 
            {
              Object RESULT =null;
//@@CUPDBG58
 parser.report_error("","expected ';' before token"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // variable_def ::= error NT$3 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // attr ::= identifier assign_operator exp_part SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG59

	Exp e = (Exp)ex;
    parser.checkCompatibleTypes(SymbolTable.get(id).getType(), e.type);
	parser.code.append("\t ST "+id+", "+e.code+"\n");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // attr ::= identifier assign_operator call 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG60

	SymbolImpl s = SymbolTable.get(id.toLowerCase());
	if (s == null) {
		parser.report_error("Undeclared variable ", "ERROR");
	}
	FunctionType f = (FunctionType)c;
	parser.checkCompatibleTypes(s.getType(), f.returnType);
	

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // attr ::= identifier assign_operator error 
            {
              Object RESULT =null;
		//@@CUPDBG61
 
	parser.report_error("Error in expression ", "ERROR"); 

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assign_operator ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG62
 parser.report_error("Expected symbol before = ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assign_operator ::= equal_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // assign_operator ::= sum_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // assign_operator ::= minus_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // assign_operator ::= times_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // assign_operator ::= divide_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // assign_operator ::= only_equal_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // equal_op ::= COLON EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equal_op",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // sum_op ::= PLUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sum_op",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // minus_op ::= MINUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_op",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // times_op ::= TIMES EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_op",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // divide_op ::= DIVIDE EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("divide_op",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // only_equal_op ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("only_equal_op",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // identifier_list ::= identifier_list COMMA identifier 
            {
              List<String> RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG63

	il.add(id.toLowerCase());
	RESULT = il;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // identifier_list ::= identifier 
            {
              List<String> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG64

	List<String> il = new ArrayList<String>();
   	il.add(id.toLowerCase());
   	RESULT = il;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // type_def ::= STRING 
            {
              Object RESULT =null;
		//@@CUPDBG65

	RESULT = Type.getType("string");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // type_def ::= BOOL 
            {
              Object RESULT =null;
		//@@CUPDBG66

	RESULT = Type.getType("boolean");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // type_def ::= INT 
            {
              Object RESULT =null;
		//@@CUPDBG67

	RESULT = Type.getType("integer");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // type_def ::= REAL 
            {
              Object RESULT =null;
		//@@CUPDBG68

	RESULT = Type.getType("real");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // header_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // variable_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		Location rlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float rl = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG69

	RESULT = rl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		Location flxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location flxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG70

	RESULT = fl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
