
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import java.util.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\004\000\002\005" +
    "\005\000\002\005\005\000\002\003\005\000\002\004\006" +
    "\000\002\004\005\000\002\024\003\000\002\024\002\000" +
    "\002\025\004\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\060\010\000\002\054" +
    "\003\000\002\056\003\000\002\057\003\000\002\057\003" +
    "\000\002\051\003\000\002\055\005\000\002\052\005\000" +
    "\002\052\003\000\002\055\003\000\002\046\004\000\002" +
    "\045\004\000\002\045\003\000\002\044\007\000\002\050" +
    "\003\000\002\006\004\000\002\006\004\000\002\020\003" +
    "\000\002\021\004\000\002\012\004\000\002\013\006\000" +
    "\002\014\005\000\002\007\004\000\002\011\010\000\002" +
    "\010\005\000\002\017\005\000\002\015\005\000\002\016" +
    "\005\000\002\016\003\000\002\022\007\000\002\023\003" +
    "\000\002\023\005\000\002\027\003\000\002\037\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\004\000\002" +
    "\031\004\000\002\031\005\000\002\031\004\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\042\004\000\002\041\004\000\002\041\004\000\002\041" +
    "\003\000\002\040\006\000\002\061\006\000\002\061\005" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\063\004\000\002\064\004\000\002\065\004\000\002\066" +
    "\004\000\002\067\004\000\002\047\005\000\002\047\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\006\002\000\002\042\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\044\006\001\002\000\004\002\244\001" +
    "\002\000\022\003\uff9d\020\012\042\uff9d\045\uff9d\046\uff9d" +
    "\047\uff9d\050\uff9d\051\uff9d\001\002\000\004\042\010\001" +
    "\002\000\004\004\011\001\002\000\056\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013" +
    "\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5" +
    "\030\uffe5\032\uffe5\033\uffe5\034\uffe5\052\uffe5\053\uffe5\054" +
    "\uffe5\001\002\000\022\003\ufffd\020\ufffd\042\ufffd\045\ufffd" +
    "\046\ufffd\047\ufffd\050\ufffd\051\ufffd\001\002\000\006\042" +
    "\010\043\236\001\002\000\022\003\uff9c\020\012\042\uff9c" +
    "\045\uff9c\046\uff9c\047\017\050\024\051\uff9c\001\002\000" +
    "\020\003\uff9d\042\uff9d\045\uff9d\046\uff9d\047\uff9d\050\uff9d" +
    "\051\uff9d\001\002\000\004\002\000\001\002\000\020\003" +
    "\031\042\010\045\026\046\ufff9\047\017\050\024\051\036" +
    "\001\002\000\004\042\010\001\002\000\004\046\224\001" +
    "\002\000\022\003\uffe3\020\uffe3\042\uffe3\045\uffe3\046\uffe3" +
    "\047\uffe3\050\uffe3\051\uffe3\001\002\000\020\003\201\005" +
    "\200\006\173\007\176\010\203\011\206\021\053\001\002" +
    "\000\012\003\031\042\010\046\ufffa\051\036\001\002\000" +
    "\004\042\010\001\002\000\004\045\041\001\002\000\012" +
    "\003\031\042\010\046\ufff9\051\036\001\002\000\004\002" +
    "\uffff\001\002\000\012\003\ufff5\042\ufff5\046\ufff5\051\ufff5" +
    "\001\002\000\012\003\uffea\042\uffea\046\uffea\051\uffea\001" +
    "\002\000\022\003\uffe4\020\uffe4\042\uffe4\045\uffe4\046\uffe4" +
    "\047\uffe4\050\uffe4\051\uffe4\001\002\000\012\003\ufff6\042" +
    "\ufff6\046\ufff6\051\ufff6\001\002\000\012\003\ufff4\042\ufff4" +
    "\046\ufff4\051\ufff4\001\002\000\004\054\131\001\002\000" +
    "\004\042\010\001\002\000\004\045\041\001\002\000\012" +
    "\003\ufff7\042\ufff7\046\ufff7\051\ufff7\001\002\000\012\003" +
    "\uffe2\042\uffe2\046\uffe2\051\uffe2\001\002\000\022\003\uffe0" +
    "\020\uffe0\042\uffe0\045\uffe0\046\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\001\002\000\012\003\031\042\010\046\ufff9\051\036" +
    "\001\002\000\004\046\046\001\002\000\022\003\uffde\020" +
    "\uffde\042\uffde\045\uffde\046\uffde\047\uffde\050\uffde\051\uffde" +
    "\001\002\000\004\004\047\001\002\000\022\003\uffe1\020" +
    "\uffe1\042\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\001\002\000\004\021\ufff2\001\002\000\004\021\053\001" +
    "\002\000\024\005\062\006\055\011\072\014\073\015\066" +
    "\016\056\017\061\031\067\042\010\001\002\000\004\040" +
    "\054\001\002\000\026\003\uffa7\005\uffa7\006\uffa7\011\uffa7" +
    "\014\uffa7\015\uffa7\016\uffa7\017\uffa7\031\uffa7\042\uffa7\001" +
    "\002\000\024\005\uffb5\006\uffb5\011\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\017\uffb5\031\uffb5\042\uffb5\001\002\000\052\003" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\012\uffc6" +
    "\013\uffc6\022\uffc6\024\uffc6\025\uffc6\026\uffc6\027\uffc6\030" +
    "\uffc6\032\uffc6\033\uffc6\034\uffc6\052\uffc6\053\uffc6\054\uffc6" +
    "\001\002\000\006\052\ufff1\053\ufff1\001\002\000\046\003" +
    "\113\004\uffd2\005\102\006\112\007\110\010\076\013\077" +
    "\024\106\025\101\026\107\027\111\030\115\032\100\033" +
    "\103\034\114\052\uffd2\053\uffd2\054\uffd2\001\002\000\052" +
    "\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012" +
    "\uffc5\013\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5" +
    "\030\uffc5\032\uffc5\033\uffc5\034\uffc5\052\uffc5\053\uffc5\054" +
    "\uffc5\001\002\000\024\005\uffb6\006\uffb6\011\uffb6\014\uffb6" +
    "\015\uffb6\016\uffb6\017\uffb6\031\uffb6\042\uffb6\001\002\000" +
    "\052\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0" +
    "\012\uffd0\013\uffd0\022\uffd0\024\uffd0\025\uffd0\026\uffd0\027" +
    "\uffd0\030\uffd0\032\uffd0\033\uffd0\034\uffd0\052\uffd0\053\uffd0" +
    "\054\uffd0\001\002\000\024\005\062\006\055\011\072\014" +
    "\073\015\066\016\056\017\061\031\067\042\010\001\002" +
    "\000\006\052\123\053\125\001\002\000\052\003\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7" +
    "\022\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\052\uffc7\053\uffc7\054\uffc7\001\002" +
    "\000\024\005\uffbf\006\uffbf\011\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\031\uffbf\042\uffbf\001\002\000\052\003\uffd1" +
    "\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\012\uffd1\013" +
    "\uffd1\022\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\032\uffd1\033\uffd1\034\uffd1\052\uffd1\053\uffd1\054\uffd1\001" +
    "\002\000\024\005\062\006\055\011\072\014\073\015\066" +
    "\016\056\017\061\031\067\042\010\001\002\000\024\005" +
    "\062\006\055\011\072\014\073\015\066\016\056\017\061" +
    "\031\067\042\010\001\002\000\052\003\uffc8\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\012\uffc8\013\uffc8\022\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\032\uffc8\033" +
    "\uffc8\034\uffc8\052\uffc8\053\uffc8\054\uffc8\001\002\000\040" +
    "\003\113\005\102\006\112\007\110\010\076\012\104\013" +
    "\077\024\106\025\101\026\107\027\111\030\115\032\100" +
    "\033\103\034\114\001\002\000\024\005\062\006\055\011" +
    "\072\014\073\015\066\016\056\017\061\031\067\042\010" +
    "\001\002\000\024\005\uffb9\006\uffb9\011\uffb9\014\uffb9\015" +
    "\uffb9\016\uffb9\017\uffb9\031\uffb9\042\uffb9\001\002\000\024" +
    "\005\uffb7\006\uffb7\011\uffb7\014\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\031\uffb7\042\uffb7\001\002\000\024\005\uffbe\006\uffbe" +
    "\011\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\031\uffbe\042" +
    "\uffbe\001\002\000\024\005\uffc3\006\uffc3\011\uffc3\014\uffc3" +
    "\015\uffc3\016\uffc3\017\uffc3\031\uffc3\042\uffc3\001\002\000" +
    "\024\005\uffbb\006\uffbb\011\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\031\uffbb\042\uffbb\001\002\000\024\005\uffbc\006" +
    "\uffbc\011\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\031\uffbc" +
    "\042\uffbc\001\002\000\052\003\uffc9\004\uffc9\005\uffc9\006" +
    "\uffc9\007\uffc9\010\uffc9\012\uffc9\013\uffc9\022\uffc9\024\uffc9" +
    "\025\uffc9\026\uffc9\027\uffc9\030\uffc9\032\uffc9\033\uffc9\034" +
    "\uffc9\052\uffc9\053\uffc9\054\uffc9\001\002\000\024\005\062" +
    "\006\055\011\072\014\073\015\066\016\056\017\061\031" +
    "\067\042\010\001\002\000\024\005\uffc4\006\uffc4\011\uffc4" +
    "\014\uffc4\015\uffc4\016\uffc4\017\uffc4\031\uffc4\042\uffc4\001" +
    "\002\000\024\005\uffc1\006\uffc1\011\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\031\uffc1\042\uffc1\001\002\000\024\005" +
    "\uffb8\006\uffb8\011\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\031\uffb8\042\uffb8\001\002\000\024\005\uffc2\006\uffc2\011" +
    "\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\031\uffc2\042\uffc2" +
    "\001\002\000\024\005\uffba\006\uffba\011\uffba\014\uffba\015" +
    "\uffba\016\uffba\017\uffba\031\uffba\042\uffba\001\002\000\052" +
    "\003\uffcf\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\012" +
    "\uffcf\013\uffcf\022\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\032\uffcf\033\uffcf\034\uffcf\052\uffcf\053\uffcf\054" +
    "\uffcf\001\002\000\024\005\uffbd\006\uffbd\011\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\017\uffbd\031\uffbd\042\uffbd\001\002\000" +
    "\024\005\uffc0\006\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\031\uffc0\042\uffc0\001\002\000\024\005\062\006" +
    "\055\011\072\014\073\015\066\016\056\017\061\031\067" +
    "\042\010\001\002\000\052\003\113\004\uffcb\005\102\006" +
    "\112\007\110\010\076\012\uffcb\013\077\022\uffcb\024\106" +
    "\025\101\026\107\027\111\030\115\032\100\033\103\034" +
    "\114\052\uffcb\053\uffcb\054\uffcb\001\002\000\052\003\113" +
    "\004\uffca\005\102\006\112\007\110\010\076\012\uffca\013" +
    "\077\022\uffca\024\106\025\101\026\107\027\111\030\115" +
    "\032\100\033\103\034\114\052\uffca\053\uffca\054\uffca\001" +
    "\002\000\052\003\113\004\uffcd\005\102\006\112\007\110" +
    "\010\076\012\uffcd\013\077\022\uffcd\024\106\025\101\026" +
    "\107\027\111\030\115\032\100\033\103\034\114\052\uffcd" +
    "\053\uffcd\054\uffcd\001\002\000\052\003\113\004\uffcc\005" +
    "\102\006\112\007\110\010\076\012\uffcc\013\077\022\uffcc" +
    "\024\106\025\101\026\107\027\111\030\115\032\100\033" +
    "\103\034\114\052\uffcc\053\uffcc\054\uffcc\001\002\000\024" +
    "\005\ufff0\006\ufff0\011\ufff0\014\ufff0\015\ufff0\016\ufff0\017" +
    "\ufff0\031\ufff0\042\ufff0\001\002\000\024\005\062\006\055" +
    "\011\072\014\073\015\066\016\056\017\061\031\067\042" +
    "\010\001\002\000\024\005\uffef\006\uffef\011\uffef\014\uffef" +
    "\015\uffef\016\uffef\017\uffef\031\uffef\042\uffef\001\002\000" +
    "\004\054\ufff3\001\002\000\004\054\uffee\001\002\000\052" +
    "\003\113\004\uffce\005\102\006\112\007\110\010\076\012" +
    "\uffce\013\077\022\uffce\024\106\025\101\026\107\027\111" +
    "\030\115\032\100\033\103\034\114\052\uffce\053\uffce\054" +
    "\uffce\001\002\000\014\003\031\042\010\045\041\046\ufff9" +
    "\051\036\001\002\000\012\003\031\042\010\046\ufff9\051" +
    "\036\001\002\000\012\003\uffeb\042\uffeb\046\uffeb\051\uffeb" +
    "\001\002\000\012\003\uffed\042\uffed\046\uffed\051\uffed\001" +
    "\002\000\004\046\046\001\002\000\012\003\uffec\042\uffec" +
    "\046\uffec\051\uffec\001\002\000\004\046\140\001\002\000" +
    "\004\041\141\001\002\000\004\002\ufffc\001\002\000\022" +
    "\003\uffdd\020\uffdd\042\uffdd\045\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\001\002\000\012\003\031\042\010\046\ufff9" +
    "\051\036\001\002\000\004\046\046\001\002\000\022\003" +
    "\uffdb\020\uffdb\042\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\001\002\000\004\011\150\001\002\000\004\021" +
    "\167\001\002\000\004\042\010\001\002\000\006\021\uffa1" +
    "\022\uffa1\001\002\000\006\021\161\022\160\001\002\000" +
    "\004\012\157\001\002\000\006\004\155\012\uffd7\001\002" +
    "\000\004\042\010\001\002\000\004\012\uffd8\001\002\000" +
    "\006\004\uffda\021\uffda\001\002\000\004\042\010\001\002" +
    "\000\010\035\162\036\164\037\163\001\002\000\006\004" +
    "\uff9f\012\uff9f\001\002\000\006\004\uffa0\012\uffa0\001\002" +
    "\000\006\004\uff9e\012\uff9e\001\002\000\006\004\uffd9\012" +
    "\uffd9\001\002\000\006\021\uffa2\022\uffa2\001\002\000\010" +
    "\035\162\036\164\037\163\001\002\000\004\004\171\001" +
    "\002\000\004\045\uffdc\001\002\000\012\003\ufff8\042\ufff8" +
    "\046\ufff8\051\ufff8\001\002\000\004\040\223\001\002\000" +
    "\026\003\221\005\062\006\055\011\072\014\073\015\066" +
    "\016\056\017\061\031\067\042\010\001\002\000\026\003" +
    "\uffa9\005\uffa9\006\uffa9\011\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\017\uffa9\031\uffa9\042\uffa9\001\002\000\004\040\217\001" +
    "\002\000\026\003\uffaa\005\uffaa\006\uffaa\011\uffaa\014\uffaa" +
    "\015\uffaa\016\uffaa\017\uffaa\031\uffaa\042\uffaa\001\002\000" +
    "\004\040\216\001\002\000\026\003\uffad\005\uffad\006\uffad" +
    "\011\uffad\014\uffad\015\uffad\016\uffad\017\uffad\031\uffad\042" +
    "\uffad\001\002\000\026\003\uffac\005\uffac\006\uffac\011\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\uffac\031\uffac\042\uffac\001" +
    "\002\000\004\040\215\001\002\000\026\003\uffa8\005\uffa8" +
    "\006\uffa8\011\uffa8\014\uffa8\015\uffa8\016\uffa8\017\uffa8\031" +
    "\uffa8\042\uffa8\001\002\000\026\003\uffab\005\uffab\006\uffab" +
    "\011\uffab\014\uffab\015\uffab\016\uffab\017\uffab\031\uffab\042" +
    "\uffab\001\002\000\024\005\062\006\055\011\072\014\073" +
    "\015\066\016\056\017\061\031\067\042\010\001\002\000" +
    "\042\003\113\005\102\006\112\007\110\010\076\012\uffd5" +
    "\013\077\022\uffd5\024\106\025\101\026\107\027\111\030" +
    "\115\032\100\033\103\034\114\001\002\000\006\012\212" +
    "\022\211\001\002\000\024\005\062\006\055\011\072\014" +
    "\073\015\066\016\056\017\061\031\067\042\010\001\002" +
    "\000\004\004\213\001\002\000\012\003\uffd6\042\uffd6\046" +
    "\uffd6\051\uffd6\001\002\000\042\003\113\005\102\006\112" +
    "\007\110\010\076\012\uffd4\013\077\022\uffd4\024\106\025" +
    "\101\026\107\027\111\030\115\032\100\033\103\034\114" +
    "\001\002\000\026\003\uffa4\005\uffa4\006\uffa4\011\uffa4\014" +
    "\uffa4\015\uffa4\016\uffa4\017\uffa4\031\uffa4\042\uffa4\001\002" +
    "\000\026\003\uffa6\005\uffa6\006\uffa6\011\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\031\uffa6\042\uffa6\001\002\000\026" +
    "\003\uffa3\005\uffa3\006\uffa3\011\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\017\uffa3\031\uffa3\042\uffa3\001\002\000\004\004\222" +
    "\001\002\000\012\003\uffae\042\uffae\046\uffae\051\uffae\001" +
    "\002\000\012\003\uffaf\042\uffaf\046\uffaf\051\uffaf\001\002" +
    "\000\026\003\uffa5\005\uffa5\006\uffa5\011\uffa5\014\uffa5\015" +
    "\uffa5\016\uffa5\017\uffa5\031\uffa5\042\uffa5\001\002\000\004" +
    "\041\225\001\002\000\004\002\ufffb\001\002\000\004\011" +
    "\150\001\002\000\004\004\230\001\002\000\004\045\uffdf" +
    "\001\002\000\014\003\031\042\010\045\026\046\ufff9\051" +
    "\036\001\002\000\004\002\ufffe\001\002\000\020\003\uffb1" +
    "\042\uffb1\045\uffb1\046\uffb1\047\uffb1\050\uffb1\051\uffb1\001" +
    "\002\000\006\021\241\022\160\001\002\000\020\003\uffb4" +
    "\042\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\001" +
    "\002\000\006\042\010\043\236\001\002\000\020\003\uffb2" +
    "\042\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\001" +
    "\002\000\020\003\uffb3\042\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\051\uffb3\001\002\000\010\035\162\036\164\037" +
    "\163\001\002\000\004\004\243\001\002\000\020\003\uffb0" +
    "\042\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\005\014\006\012\042\013\001\001\000\004" +
    "\050\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\040\232\041\234\047\233\050\150" +
    "\001\001\000\014\007\020\011\024\012\031\013\036\042" +
    "\230\001\001\000\004\006\015\001\001\000\002\001\001" +
    "\000\034\004\026\007\020\011\024\012\031\013\036\022" +
    "\033\024\017\025\022\026\037\050\021\055\032\060\034" +
    "\061\027\001\001\000\004\050\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\062\173\063\201\064\204" +
    "\065\176\066\174\067\203\001\001\000\016\022\033\026" +
    "\171\050\021\055\032\060\034\061\027\001\001\000\004" +
    "\050\145\001\001\000\006\010\141\020\142\001\001\000" +
    "\022\022\033\024\136\025\022\026\037\050\021\055\032" +
    "\060\034\061\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\050\047\054" +
    "\050\001\001\000\006\014\041\020\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\022" +
    "\033\024\043\025\022\026\037\050\021\055\032\060\034" +
    "\061\027\001\001\000\004\021\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\063\051\001\001\000\020\030\067\031\057\033" +
    "\063\036\070\037\056\050\062\056\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\032\104\034\074\035\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\030\067\031\127\033\063\036\070\050\062" +
    "\001\001\000\004\057\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\030\067\031\121" +
    "\033\063\036\070\050\062\001\001\000\014\030\067\031" +
    "\073\033\063\036\070\050\062\001\001\000\002\001\001" +
    "\000\010\032\104\034\074\035\115\001\001\000\014\030" +
    "\067\031\120\033\063\036\070\050\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\067\031\117\033\063\036\070\050\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\030\067\031\116" +
    "\033\063\036\070\050\062\001\001\000\010\032\104\034" +
    "\074\035\115\001\001\000\010\032\104\034\074\035\115" +
    "\001\001\000\010\032\104\034\074\035\115\001\001\000" +
    "\010\032\104\034\074\035\115\001\001\000\002\001\001" +
    "\000\020\030\067\031\057\033\063\036\070\037\126\050" +
    "\062\051\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\104\034\074\035\115\001" +
    "\001\000\026\020\131\022\033\024\132\025\022\026\037" +
    "\050\021\052\133\055\032\060\034\061\027\001\001\000" +
    "\022\022\033\024\134\025\022\026\037\050\021\055\032" +
    "\060\034\061\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\022\033\024\143\025\022\026\037\050\021" +
    "\055\032\060\034\061\027\001\001\000\004\021\144\001" +
    "\001\000\002\001\001\000\004\017\146\001\001\000\002" +
    "\001\001\000\012\015\153\016\152\047\151\050\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\153\016\155\047\151\050" +
    "\150\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\165\001\001\000\004\053\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\167\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\030\067\031\057\033\063\036\070\037\217\050" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\207\030\067\031\206\033\063\036\070\050" +
    "\062\001\001\000\010\032\104\034\074\035\115\001\001" +
    "\000\002\001\001\000\014\030\067\031\213\033\063\036" +
    "\070\050\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\032\104\034\074\035\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\231\022" +
    "\033\024\017\025\022\026\037\050\021\055\032\060\034" +
    "\061\027\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\040\237\047\233\050\150\001\001" +
    "\000\012\040\232\041\236\047\233\050\150\001\001\000" +
    "\010\040\237\047\233\050\150\001\001\000\002\001\001" +
    "\000\004\053\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;
  public static int errors = 0;

  public void report_error(String message, Object info){
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message +
							"near " + lexer.current_lexeme());
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_def_part program_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_def ::= variable_def_part header_declarations body_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_def ::= header_declarations variable_def_part body_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_def_part ::= PROGRAM identifier SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body_def_part ::= BEGIN stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body_def_part ::= stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_def_part ::= stmt_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt_def_list ::= stmt_def_list stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_def_list ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= for_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= attr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // for_designator ::= FOR control_variable equal_op initial_value direction final_value 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_designator",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // control_variable ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_variable",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // initial_value ::= exp_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_value",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // direction ::= TO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direction",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // direction ::= DOWNTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direction",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // final_value ::= exp_part 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("final_value",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // for_def_part ::= for_designator DO for_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for_stmt ::= block stmt_def_part block_end 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // for_stmt ::= stmt_def_part 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // for_def_part ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG3
parser.report_error("Error in for definition ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // const_def_part ::= CONST const_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_part",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // const_def_list ::= const_def_list const_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // const_def_list ::= const_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // const_def ::= identifier_list COLON type_def EQUAL exp_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // identifier ::= IDENTIFIER 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // header_declarations ::= header_declarations procedure_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // header_declarations ::= header_declarations function_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // block ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // block_end ::= END SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_end",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // procedure_def_part ::= procedure_declaration procedure_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_def_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // procedure_declaration ::= PROCEDURE identifier parameters_list SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // procedure_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // function_def_part ::= function_declaration function_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_def_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // function_declaration ::= FUNCTION identifier parameters_list COLON type_def SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // function_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameters_list ::= LPAREN parameters RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter ::= identifier_list COLON type_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parameters ::= parameter SEMI parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // call ::= identifier LPAREN args RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // args ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // args ::= args COMMA exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp_list ::= exp_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp_part ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_part",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= exp error 
            {
              Object RESULT =null;
		//@@CUPDBG4
 parser.report_error("Missing operand ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= bool_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp log_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= un_arim_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= exp bin_arim_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= exp rel_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rel_op ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // rel_op ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // rel_op ::= GE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // rel_op ::= LE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // rel_op ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bool_op ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // log_op ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // log_op ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // log_op ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bin_arim_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bin_arim_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // bin_arim_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // bin_arim_op ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // bin_arim_op ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // un_arim_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // un_arim_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // variable_def_part ::= VAR variable_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable_def_list ::= variable_def_list variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // variable_def_list ::= NEWLINE variable_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // variable_def_list ::= variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // variable_def ::= identifier_list COLON type_def SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // attr ::= identifier assign_operator exp_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // attr ::= identifier assign_operator error 
            {
              Object RESULT =null;
		//@@CUPDBG5
 parser.report_error("Error in expression ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign_operator ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG6
 parser.report_error("Expected symbol before = ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assign_operator ::= equal_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assign_operator ::= sum_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assign_operator ::= minus_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // assign_operator ::= times_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // assign_operator ::= divide_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // equal_op ::= COLON EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equal_op",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sum_op ::= PLUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sum_op",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // minus_op ::= MINUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // times_op ::= TIMES EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_op",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // divide_op ::= DIVIDE EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("divide_op",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // identifier_list ::= identifier_list COMMA identifier 
            {
              List<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // identifier_list ::= identifier 
            {
              List<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type_def ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type_def ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // type_def ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // header_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // variable_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
