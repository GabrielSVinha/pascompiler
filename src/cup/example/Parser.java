
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import java.util.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\136\000\002\002\004\000\002\002\004\000\002\005" +
    "\005\000\002\005\005\000\002\003\005\000\002\004\006" +
    "\000\002\004\005\000\002\024\003\000\002\024\002\000" +
    "\002\025\004\000\002\025\003\000\002\025\004\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\053" +
    "\010\000\002\055\005\000\002\046\004\000\002\045\004" +
    "\000\002\045\003\000\002\044\007\000\002\050\003\000" +
    "\002\006\004\000\002\006\004\000\002\020\003\000\002" +
    "\021\004\000\002\012\004\000\002\013\006\000\002\014" +
    "\005\000\002\007\004\000\002\011\010\000\002\010\005" +
    "\000\002\017\005\000\002\015\005\000\002\016\005\000" +
    "\002\016\003\000\002\022\007\000\002\023\003\000\002" +
    "\023\005\000\002\027\003\000\002\037\003\000\002\031" +
    "\004\000\002\031\004\000\002\031\005\000\002\031\004" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\003\000\002\031\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\033\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\036" +
    "\003\000\002\036\003\000\002\042\004\000\002\041\004" +
    "\000\002\041\004\000\002\041\003\000\002\040\006\000" +
    "\002\056\005\000\002\056\005\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\057" +
    "\003\000\002\057\003\000\002\060\004\000\002\061\004" +
    "\000\002\062\004\000\002\063\004\000\002\064\004\000" +
    "\002\047\005\000\002\047\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\006\002\000\002\042" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\004\043\006\001\002\000\004\002\230\001" +
    "\002\000\020\017\012\041\uffa5\042\uffa5\044\uffa5\045\uffa5" +
    "\046\uffa5\047\uffa5\001\002\000\004\041\010\001\002\000" +
    "\004\004\011\001\002\000\060\003\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\020" +
    "\uffec\021\uffec\023\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\031\uffec\032\uffec\033\uffec\041\uffec\045\uffec\051\uffec\053" +
    "\uffec\001\002\000\020\017\ufffd\041\ufffd\042\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\047\ufffd\001\002\000\006\041\010\042" +
    "\222\001\002\000\020\017\012\041\uffa4\042\uffa4\044\uffa4" +
    "\045\uffa4\046\017\047\024\001\002\000\016\041\uffa5\042" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5\001\002\000\004" +
    "\002\000\001\002\000\016\041\010\042\032\044\027\045" +
    "\ufff9\046\017\047\024\001\002\000\004\041\010\001\002" +
    "\000\004\045\210\001\002\000\020\017\uffea\041\uffea\042" +
    "\uffea\044\uffea\045\uffea\046\uffea\047\uffea\001\002\000\020" +
    "\003\163\005\162\006\154\007\157\010\165\011\170\020" +
    "\161\001\002\000\010\004\ufffa\041\010\045\ufffa\001\002" +
    "\000\004\041\010\001\002\000\004\051\060\001\002\000" +
    "\004\044\040\001\002\000\010\041\010\042\032\045\ufff9" +
    "\001\002\000\004\002\uffff\001\002\000\010\004\ufff5\041" +
    "\ufff5\045\ufff5\001\002\000\006\041\010\042\032\001\002" +
    "\000\020\017\uffeb\041\uffeb\042\uffeb\044\uffeb\045\uffeb\046" +
    "\uffeb\047\uffeb\001\002\000\010\004\ufff3\041\ufff3\045\ufff3" +
    "\001\002\000\010\004\ufff4\041\ufff4\045\ufff4\001\002\000" +
    "\004\044\040\001\002\000\010\004\ufff7\041\ufff7\045\ufff7" +
    "\001\002\000\010\041\uffe9\042\uffe9\045\uffe9\001\002\000" +
    "\020\017\uffe7\041\uffe7\042\uffe7\044\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\001\002\000\010\041\010\042\032\045\ufff9\001" +
    "\002\000\004\045\045\001\002\000\020\017\uffe5\041\uffe5" +
    "\042\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\001\002\000" +
    "\004\004\046\001\002\000\020\017\uffe8\041\uffe8\042\uffe8" +
    "\044\uffe8\045\uffe8\046\uffe8\047\uffe8\001\002\000\010\004" +
    "\ufff6\041\ufff6\045\ufff6\001\002\000\010\004\ufff8\041\ufff8" +
    "\045\ufff8\001\002\000\004\045\052\001\002\000\004\040" +
    "\053\001\002\000\004\002\ufffc\001\002\000\020\017\uffe4" +
    "\041\uffe4\042\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\001" +
    "\002\000\010\041\010\042\032\045\ufff9\001\002\000\004" +
    "\045\045\001\002\000\020\017\uffe2\041\uffe2\042\uffe2\044" +
    "\uffe2\045\uffe2\046\uffe2\047\uffe2\001\002\000\022\005\064" +
    "\006\061\011\073\014\074\015\067\016\062\030\070\041" +
    "\010\001\002\000\022\005\uffbd\006\uffbd\011\uffbd\014\uffbd" +
    "\015\uffbd\016\uffbd\030\uffbd\041\uffbd\001\002\000\054\003" +
    "\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\012\uffcd" +
    "\013\uffcd\021\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027" +
    "\uffcd\031\uffcd\032\uffcd\033\uffcd\041\uffcd\045\uffcd\051\uffcd" +
    "\053\uffcd\001\002\000\040\003\114\005\103\006\113\007" +
    "\111\010\077\013\100\023\107\024\102\025\110\026\112" +
    "\027\116\031\101\032\105\033\115\053\125\001\002\000" +
    "\022\005\uffbe\006\uffbe\011\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\030\uffbe\041\uffbe\001\002\000\054\003\uffd0\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\013\uffd0\021\uffd0" +
    "\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0\032" +
    "\uffd0\033\uffd0\041\uffd0\045\uffd0\051\uffd0\053\uffd0\001\002" +
    "\000\022\005\064\006\061\011\073\014\074\015\067\016" +
    "\062\030\070\041\010\001\002\000\054\003\uffce\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\012\uffce\013\uffce\021" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\031\uffce" +
    "\032\uffce\033\uffce\041\uffce\045\uffce\051\uffce\053\uffce\001" +
    "\002\000\022\005\uffc7\006\uffc7\011\uffc7\014\uffc7\015\uffc7" +
    "\016\uffc7\030\uffc7\041\uffc7\001\002\000\022\005\064\006" +
    "\061\011\073\014\074\015\067\016\062\030\070\041\010" +
    "\001\002\000\054\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\012\uffd1\013\uffd1\021\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\041" +
    "\uffd1\045\uffd1\051\uffd1\053\uffd1\001\002\000\022\005\064" +
    "\006\061\011\073\014\074\015\067\016\062\030\070\041" +
    "\010\001\002\000\054\003\uffcf\004\uffcf\005\uffcf\006\uffcf" +
    "\007\uffcf\010\uffcf\012\uffcf\013\uffcf\021\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\041\uffcf\045\uffcf\051\uffcf\053\uffcf\001\002\000\040\003" +
    "\114\005\103\006\113\007\111\010\077\012\104\013\100" +
    "\023\107\024\102\025\110\026\112\027\116\031\101\032" +
    "\105\033\115\001\002\000\022\005\064\006\061\011\073" +
    "\014\074\015\067\016\062\030\070\041\010\001\002\000" +
    "\022\005\uffc1\006\uffc1\011\uffc1\014\uffc1\015\uffc1\016\uffc1" +
    "\030\uffc1\041\uffc1\001\002\000\022\005\uffbf\006\uffbf\011" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\030\uffbf\041\uffbf\001\002" +
    "\000\022\005\uffc6\006\uffc6\011\uffc6\014\uffc6\015\uffc6\016" +
    "\uffc6\030\uffc6\041\uffc6\001\002\000\022\005\uffcb\006\uffcb" +
    "\011\uffcb\014\uffcb\015\uffcb\016\uffcb\030\uffcb\041\uffcb\001" +
    "\002\000\022\005\uffc3\006\uffc3\011\uffc3\014\uffc3\015\uffc3" +
    "\016\uffc3\030\uffc3\041\uffc3\001\002\000\054\003\uffd2\004" +
    "\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\013\uffd2" +
    "\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\031" +
    "\uffd2\032\uffd2\033\uffd2\041\uffd2\045\uffd2\051\uffd2\053\uffd2" +
    "\001\002\000\022\005\uffc4\006\uffc4\011\uffc4\014\uffc4\015" +
    "\uffc4\016\uffc4\030\uffc4\041\uffc4\001\002\000\022\005\064" +
    "\006\061\011\073\014\074\015\067\016\062\030\070\041" +
    "\010\001\002\000\022\005\uffcc\006\uffcc\011\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\030\uffcc\041\uffcc\001\002\000\022\005" +
    "\uffc9\006\uffc9\011\uffc9\014\uffc9\015\uffc9\016\uffc9\030\uffc9" +
    "\041\uffc9\001\002\000\022\005\uffc0\006\uffc0\011\uffc0\014" +
    "\uffc0\015\uffc0\016\uffc0\030\uffc0\041\uffc0\001\002\000\022" +
    "\005\uffca\006\uffca\011\uffca\014\uffca\015\uffca\016\uffca\030" +
    "\uffca\041\uffca\001\002\000\022\005\uffc2\006\uffc2\011\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\030\uffc2\041\uffc2\001\002\000" +
    "\054\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8" +
    "\012\uffd8\013\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\026" +
    "\uffd8\027\uffd8\031\uffd8\032\uffd8\033\uffd8\041\uffd8\045\uffd8" +
    "\051\uffd8\053\uffd8\001\002\000\022\005\uffc5\006\uffc5\011" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\030\uffc5\041\uffc5\001\002" +
    "\000\022\005\uffc8\006\uffc8\011\uffc8\014\uffc8\015\uffc8\016" +
    "\uffc8\030\uffc8\041\uffc8\001\002\000\022\005\064\006\061" +
    "\011\073\014\074\015\067\016\062\030\070\041\010\001" +
    "\002\000\054\003\114\004\uffd4\005\103\006\113\007\111" +
    "\010\077\012\uffd4\013\100\021\uffd4\023\107\024\102\025" +
    "\110\026\112\027\116\031\101\032\105\033\115\041\uffd4" +
    "\045\uffd4\051\uffd4\053\uffd4\001\002\000\054\003\114\004" +
    "\uffd3\005\103\006\113\007\111\010\077\012\uffd3\013\100" +
    "\021\uffd3\023\107\024\102\025\110\026\112\027\116\031" +
    "\101\032\105\033\115\041\uffd3\045\uffd3\051\uffd3\053\uffd3" +
    "\001\002\000\054\003\114\004\uffd6\005\103\006\113\007" +
    "\111\010\077\012\uffd6\013\100\021\uffd6\023\107\024\102" +
    "\025\110\026\112\027\116\031\101\032\105\033\115\041" +
    "\uffd6\045\uffd6\051\uffd6\053\uffd6\001\002\000\054\003\114" +
    "\004\uffd5\005\103\006\113\007\111\010\077\012\uffd5\013" +
    "\100\021\uffd5\023\107\024\102\025\110\026\112\027\116" +
    "\031\101\032\105\033\115\041\uffd5\045\uffd5\051\uffd5\053" +
    "\uffd5\001\002\000\054\003\114\004\uffd7\005\103\006\113" +
    "\007\111\010\077\012\uffd7\013\100\021\uffd7\023\107\024" +
    "\102\025\110\026\112\027\116\031\101\032\105\033\115" +
    "\041\uffd7\045\uffd7\051\uffd7\053\uffd7\001\002\000\010\004" +
    "\ufff9\041\010\042\032\001\002\000\004\004\127\001\002" +
    "\000\010\004\ufff2\041\ufff2\045\ufff2\001\002\000\004\011" +
    "\132\001\002\000\004\020\151\001\002\000\004\041\010" +
    "\001\002\000\006\020\uffa9\021\uffa9\001\002\000\006\020" +
    "\143\021\142\001\002\000\004\012\141\001\002\000\006" +
    "\004\137\012\uffde\001\002\000\004\041\010\001\002\000" +
    "\004\012\uffdf\001\002\000\006\004\uffe1\020\uffe1\001\002" +
    "\000\004\041\010\001\002\000\010\034\144\035\146\036" +
    "\145\001\002\000\006\004\uffa7\012\uffa7\001\002\000\006" +
    "\004\uffa8\012\uffa8\001\002\000\006\004\uffa6\012\uffa6\001" +
    "\002\000\006\004\uffe0\012\uffe0\001\002\000\006\020\uffaa" +
    "\021\uffaa\001\002\000\010\034\144\035\146\036\145\001" +
    "\002\000\004\004\153\001\002\000\004\044\uffe3\001\002" +
    "\000\004\037\207\001\002\000\024\003\206\005\064\006" +
    "\061\011\073\014\074\015\067\016\062\030\070\041\010" +
    "\001\002\000\024\003\uffb1\005\uffb1\006\uffb1\011\uffb1\014" +
    "\uffb1\015\uffb1\016\uffb1\030\uffb1\041\uffb1\001\002\000\004" +
    "\037\203\001\002\000\024\003\uffb2\005\uffb2\006\uffb2\011" +
    "\uffb2\014\uffb2\015\uffb2\016\uffb2\030\uffb2\041\uffb2\001\002" +
    "\000\004\037\202\001\002\000\004\037\201\001\002\000" +
    "\024\003\uffb5\005\uffb5\006\uffb5\011\uffb5\014\uffb5\015\uffb5" +
    "\016\uffb5\030\uffb5\041\uffb5\001\002\000\024\003\uffb4\005" +
    "\064\006\061\011\073\014\074\015\067\016\062\030\070" +
    "\041\010\001\002\000\004\037\177\001\002\000\024\003" +
    "\uffb3\005\uffb3\006\uffb3\011\uffb3\014\uffb3\015\uffb3\016\uffb3" +
    "\030\uffb3\041\uffb3\001\002\000\024\003\uffb0\005\uffb0\006" +
    "\uffb0\011\uffb0\014\uffb0\015\uffb0\016\uffb0\030\uffb0\041\uffb0" +
    "\001\002\000\022\005\064\006\061\011\073\014\074\015" +
    "\067\016\062\030\070\041\010\001\002\000\042\003\114" +
    "\005\103\006\113\007\111\010\077\012\uffdc\013\100\021" +
    "\uffdc\023\107\024\102\025\110\026\112\027\116\031\101" +
    "\032\105\033\115\001\002\000\006\012\174\021\173\001" +
    "\002\000\022\005\064\006\061\011\073\014\074\015\067" +
    "\016\062\030\070\041\010\001\002\000\004\004\175\001" +
    "\002\000\010\004\uffdd\041\uffdd\045\uffdd\001\002\000\042" +
    "\003\114\005\103\006\113\007\111\010\077\012\uffdb\013" +
    "\100\021\uffdb\023\107\024\102\025\110\026\112\027\116" +
    "\031\101\032\105\033\115\001\002\000\024\003\uffac\005" +
    "\uffac\006\uffac\011\uffac\014\uffac\015\uffac\016\uffac\030\uffac" +
    "\041\uffac\001\002\000\040\003\114\005\103\006\113\007" +
    "\111\010\077\013\100\023\107\024\102\025\110\026\112" +
    "\027\116\031\101\032\105\033\115\051\ufff1\001\002\000" +
    "\024\003\uffae\005\uffae\006\uffae\011\uffae\014\uffae\015\uffae" +
    "\016\uffae\030\uffae\041\uffae\001\002\000\024\003\uffaf\005" +
    "\uffaf\006\uffaf\011\uffaf\014\uffaf\015\uffaf\016\uffaf\030\uffaf" +
    "\041\uffaf\001\002\000\024\003\uffab\005\uffab\006\uffab\011" +
    "\uffab\014\uffab\015\uffab\016\uffab\030\uffab\041\uffab\001\002" +
    "\000\010\004\uffb7\041\uffb7\045\uffb7\001\002\000\044\003" +
    "\114\004\uffd9\005\103\006\113\007\111\010\077\013\100" +
    "\023\107\024\102\025\110\026\112\027\116\031\101\032" +
    "\105\033\115\041\uffd9\045\uffd9\001\002\000\010\004\uffb6" +
    "\041\uffb6\045\uffb6\001\002\000\024\003\uffad\005\uffad\006" +
    "\uffad\011\uffad\014\uffad\015\uffad\016\uffad\030\uffad\041\uffad" +
    "\001\002\000\004\040\211\001\002\000\004\002\ufffb\001" +
    "\002\000\004\011\132\001\002\000\004\004\214\001\002" +
    "\000\004\044\uffe6\001\002\000\012\041\010\042\032\044" +
    "\027\045\ufff9\001\002\000\004\002\ufffe\001\002\000\016" +
    "\041\uffb9\042\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\001" +
    "\002\000\006\020\225\021\142\001\002\000\016\041\uffbc" +
    "\042\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\001\002\000" +
    "\006\041\010\042\222\001\002\000\016\041\uffba\042\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\001\002\000\016\041" +
    "\uffbb\042\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\001\002" +
    "\000\010\034\144\035\146\036\145\001\002\000\004\004" +
    "\227\001\002\000\016\041\uffb8\042\uffb8\044\uffb8\045\uffb8" +
    "\046\uffb8\047\uffb8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\005\014\006\012\042\013\001\001\000\004" +
    "\050\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\040\216\041\220\047\217\050\132" +
    "\001\001\000\014\007\020\011\025\012\032\013\035\042" +
    "\214\001\001\000\004\006\015\001\001\000\002\001\001" +
    "\000\034\004\027\007\020\011\025\012\032\013\035\022" +
    "\034\024\017\025\022\026\036\050\021\053\033\055\024" +
    "\056\030\001\001\000\004\050\211\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\057\154\060\163\061\165" +
    "\062\157\063\155\064\166\001\001\000\016\022\034\026" +
    "\047\050\021\053\033\055\024\056\030\001\001\000\004" +
    "\050\127\001\001\000\002\001\001\000\006\010\053\020" +
    "\054\001\001\000\022\022\034\024\050\025\022\026\036" +
    "\050\021\053\033\055\024\056\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\022\034\025\046\026\036" +
    "\050\021\053\033\055\024\056\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\040" +
    "\020\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\022\034\024\042\025\022\026\036" +
    "\050\021\053\033\055\024\056\030\001\001\000\004\021" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\034\026\047\050\021\053\033\055" +
    "\024\056\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\022\034\024\055\025\022\026\036\050\021\053\033" +
    "\055\024\056\030\001\001\000\004\021\056\001\001\000" +
    "\002\001\001\000\014\030\071\031\062\033\065\036\070" +
    "\050\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\032\105\034\075\035\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\030\071\031\123\033\065\036" +
    "\070\050\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\030\071\031\122\033\065\036\070\050\064\001" +
    "\001\000\002\001\001\000\014\030\071\031\074\033\065" +
    "\036\070\050\064\001\001\000\002\001\001\000\010\032" +
    "\105\034\075\035\116\001\001\000\014\030\071\031\121" +
    "\033\065\036\070\050\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\030" +
    "\071\031\120\033\065\036\070\050\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\030\071\031\117\033\065\036" +
    "\070\050\064\001\001\000\010\032\105\034\075\035\116" +
    "\001\001\000\010\032\105\034\075\035\116\001\001\000" +
    "\010\032\105\034\075\035\116\001\001\000\010\032\105" +
    "\034\075\035\116\001\001\000\010\032\105\034\075\035" +
    "\116\001\001\000\022\022\034\024\125\025\022\026\036" +
    "\050\021\053\033\055\024\056\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\130\001\001\000\002" +
    "\001\001\000\012\015\135\016\134\047\133\050\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\015\135\016\137\047\133\050" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\050\147\001\001\000\004\051\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\030\071" +
    "\031\204\033\065\036\070\037\203\050\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\030" +
    "\071\031\177\033\065\036\070\050\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\023" +
    "\171\030\071\031\170\033\065\036\070\050\064\001\001" +
    "\000\010\032\105\034\075\035\116\001\001\000\002\001" +
    "\001\000\014\030\071\031\175\033\065\036\070\050\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\032" +
    "\105\034\075\035\116\001\001\000\002\001\001\000\010" +
    "\032\105\034\075\035\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\105\034\075\035\116\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\215\022\034\024\017\025\022\026\036\050\021" +
    "\053\033\055\024\056\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\223\047\217" +
    "\050\132\001\001\000\012\040\216\041\222\047\217\050" +
    "\132\001\001\000\010\040\223\047\217\050\132\001\001" +
    "\000\002\001\001\000\004\051\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG1

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG2
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;
  public static int errors = 0;

  public void report_error(String message, Object info){
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message +
							"near " + lexer.current_lexeme());
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_def_part program_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_def ::= variable_def_part header_declarations body_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_def ::= header_declarations variable_def_part body_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_def_part ::= PROGRAM identifier SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // body_def_part ::= BEGIN stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body_def_part ::= stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // stmt_def_part ::= stmt_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt_def_list ::= stmt_def_list stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_def_list ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_def_list ::= NEWLINE stmt_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= attr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= for_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // for_def_part ::= control_attr TO exp DO stmt_def_part SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // control_attr ::= identifier equal_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_attr",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // const_def_part ::= CONST const_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_part",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // const_def_list ::= const_def_list const_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // const_def_list ::= const_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def_list",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // const_def ::= identifier_list COLON type_def EQUAL exp_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("const_def",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // header_declarations ::= header_declarations procedure_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // header_declarations ::= header_declarations function_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // block ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // block_end ::= END SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_end",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // procedure_def_part ::= procedure_declaration procedure_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_def_part",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // procedure_declaration ::= PROCEDURE identifier parameters_list SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // procedure_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // function_def_part ::= function_declaration function_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_def_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // function_declaration ::= FUNCTION identifier parameters_list COLON type_def SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // function_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parameters_list ::= LPAREN parameters RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parameter ::= identifier_list COLON type_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parameters ::= parameter SEMI parameters 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameters ::= parameter 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // call ::= identifier LPAREN args RPAREN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // args ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // args ::= args COMMA exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_list ::= exp_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_part ::= exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_part",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp error 
            {
              Object RESULT =null;
		//@@CUPDBG3
 parser.report_error("Missing operand ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= bool_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp log_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= un_arim_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp bin_arim_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp rel_op exp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= literal 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= identifier 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // rel_op ::= GT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // rel_op ::= LT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // rel_op ::= GE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // rel_op ::= LE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rel_op ::= DIFF 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // bool_op ::= NOT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // log_op ::= AND 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // log_op ::= XOR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // log_op ::= OR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bin_arim_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bin_arim_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bin_arim_op ::= TIMES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bin_arim_op ::= DIVIDE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bin_arim_op ::= MOD 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // un_arim_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // un_arim_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // variable_def_part ::= VAR variable_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // variable_def_list ::= variable_def_list variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // variable_def_list ::= NEWLINE variable_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // variable_def_list ::= variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variable_def ::= identifier_list COLON type_def SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // attr ::= identifier assign_operator exp_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // attr ::= identifier assign_operator error 
            {
              Object RESULT =null;
		//@@CUPDBG4
 parser.report_error("Error in expression ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // assign_operator ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG5
 parser.report_error("Expected symbol before = ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // assign_operator ::= equal_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // assign_operator ::= sum_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // assign_operator ::= minus_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // assign_operator ::= times_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // assign_operator ::= divide_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // equal_op ::= COLON EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equal_op",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // sum_op ::= PLUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sum_op",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // minus_op ::= MINUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_op",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // times_op ::= TIMES EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_op",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // divide_op ::= DIVIDE EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("divide_op",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // identifier_list ::= identifier_list COMMA identifier 
            {
              List<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // identifier_list ::= identifier 
            {
              List<String> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // type_def ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // type_def ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // type_def ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // header_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // variable_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
