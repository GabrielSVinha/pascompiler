
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

package cup.example;

import java_cup.runtime.*;
import java.util.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.io.*;
import type.*;
import symbolTable.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\002\004\000\002\005" +
    "\006\000\002\005\005\000\002\003\005\000\002\007\003" +
    "\000\002\004\006\000\002\004\005\000\002\025\003\000" +
    "\002\025\002\000\002\026\004\000\002\026\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\061" +
    "\010\000\002\055\003\000\002\057\003\000\002\060\003" +
    "\000\002\060\003\000\002\041\003\000\002\056\005\000" +
    "\002\053\005\000\002\053\003\000\002\056\003\000\002" +
    "\052\003\000\002\006\004\000\002\006\004\000\002\021" +
    "\003\000\002\022\004\000\002\013\005\000\002\014\006" +
    "\000\002\015\005\000\002\010\005\000\002\012\010\000" +
    "\002\011\005\000\002\020\005\000\002\020\002\000\002" +
    "\016\005\000\002\017\005\000\002\017\003\000\002\023" +
    "\007\000\002\024\003\000\002\024\005\000\002\040\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\004\000" +
    "\002\032\004\000\002\032\005\000\002\032\004\000\002" +
    "\032\005\000\002\032\005\000\002\032\005\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\044\004\000" +
    "\002\043\004\000\002\043\003\000\002\042\006\000\002" +
    "\071\002\000\002\042\005\000\002\062\006\000\002\062" +
    "\005\000\002\062\005\000\002\063\003\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\064\004\000\002\065\004\000\002" +
    "\066\004\000\002\067\004\000\002\070\004\000\002\051" +
    "\005\000\002\051\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\006\002\000" +
    "\002\044\002\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\004\046\006\001\002\000\004\002\254\001" +
    "\002\000\024\003\uff9e\020\uff9e\024\015\044\uff9e\047\uff9e" +
    "\050\uff9e\051\uff9e\052\uff9e\053\uff9e\001\002\000\004\044" +
    "\010\001\002\000\004\004\011\001\002\000\056\003\uffe8" +
    "\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\013\uffe8\021\uffe8\022\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\033\uffe8\034\uffe8\035\uffe8\054\uffe8\055" +
    "\uffe8\056\uffe8\001\002\000\024\003\ufffd\020\ufffd\024\ufffd" +
    "\044\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001" +
    "\002\000\022\003\uff9d\020\016\044\uff9d\047\uff9d\050\uff9d" +
    "\051\021\052\026\053\uff9d\001\002\000\022\003\uff9d\020" +
    "\016\044\uff9d\047\uff9d\050\uff9d\051\uff9d\052\uff9d\053\uff9d" +
    "\001\002\000\004\002\000\001\002\000\022\003\ufffc\020" +
    "\ufffc\044\ufffc\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc" +
    "\001\002\000\006\003\240\044\010\001\002\000\020\003" +
    "\uff9e\044\uff9e\047\uff9e\050\uff9e\051\uff9e\052\uff9e\053\uff9e" +
    "\001\002\000\020\003\033\044\010\047\030\050\ufff8\051" +
    "\021\052\026\053\040\001\002\000\004\044\010\001\002" +
    "\000\004\050\233\001\002\000\022\003\uffe6\020\uffe6\044" +
    "\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\001\002" +
    "\000\020\003\206\005\205\006\200\007\203\010\210\011" +
    "\213\021\056\001\002\000\012\003\033\044\010\050\ufff9" +
    "\053\040\001\002\000\004\044\010\001\002\000\006\020" +
    "\016\047\uff9d\001\002\000\012\003\033\044\010\050\ufff8" +
    "\053\040\001\002\000\004\002\uffff\001\002\000\012\003" +
    "\ufff5\044\ufff5\050\ufff5\053\ufff5\001\002\000\012\003\uffe9" +
    "\044\uffe9\050\uffe9\053\uffe9\001\002\000\022\003\uffe7\020" +
    "\uffe7\044\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7" +
    "\001\002\000\012\003\ufff4\044\ufff4\050\ufff4\053\ufff4\001" +
    "\002\000\012\003\ufff3\044\ufff3\050\ufff3\053\ufff3\001\002" +
    "\000\004\056\134\001\002\000\004\044\010\001\002\000" +
    "\006\020\016\047\uff9d\001\002\000\012\003\ufff6\044\ufff6" +
    "\050\ufff6\053\ufff6\001\002\000\004\047\044\001\002\000" +
    "\012\003\uffe5\044\uffe5\050\uffe5\053\uffe5\001\002\000\022" +
    "\003\uffe3\020\uffe3\044\uffe3\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\053\uffe3\001\002\000\012\003\033\044\010\050\ufff8" +
    "\053\040\001\002\000\004\050\051\001\002\000\022\003" +
    "\uffe1\020\uffe1\044\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1" +
    "\053\uffe1\001\002\000\004\004\052\001\002\000\022\003" +
    "\uffe4\020\uffe4\044\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\001\002\000\004\021\ufff1\001\002\000\004\021" +
    "\056\001\002\000\024\005\065\006\060\011\075\014\076" +
    "\015\071\016\061\017\064\032\073\044\010\001\002\000" +
    "\004\042\057\001\002\000\026\003\uffa9\005\uffa9\006\uffa9" +
    "\011\uffa9\014\uffa9\015\uffa9\016\uffa9\017\uffa9\032\uffa9\044" +
    "\uffa9\001\002\000\024\005\uffb9\006\uffb9\011\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\032\uffb9\044\uffb9\001\002\000" +
    "\052\003\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010\uffca" +
    "\012\uffca\013\uffca\022\uffca\025\uffca\026\uffca\027\uffca\030" +
    "\uffca\031\uffca\033\uffca\034\uffca\035\uffca\054\uffca\055\uffca" +
    "\056\uffca\001\002\000\006\054\ufff0\055\ufff0\001\002\000" +
    "\046\003\116\004\uffd5\005\105\006\115\007\113\010\100" +
    "\013\102\025\111\026\104\027\112\030\114\031\120\033" +
    "\103\034\106\035\117\054\uffd5\055\uffd5\056\uffd5\001\002" +
    "\000\052\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010" +
    "\uffc9\012\uffc9\013\uffc9\022\uffc9\025\uffc9\026\uffc9\027\uffc9" +
    "\030\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\054\uffc9\055" +
    "\uffc9\056\uffc9\001\002\000\024\005\uffba\006\uffba\011\uffba" +
    "\014\uffba\015\uffba\016\uffba\017\uffba\032\uffba\044\uffba\001" +
    "\002\000\052\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3" +
    "\010\uffd3\012\uffd3\013\uffd3\022\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\054\uffd3" +
    "\055\uffd3\056\uffd3\001\002\000\006\054\127\055\131\001" +
    "\002\000\024\005\065\006\060\011\075\014\076\015\071" +
    "\016\061\017\064\032\073\044\010\001\002\000\052\003" +
    "\uff9c\004\uff9c\005\uff9c\006\uff9c\007\uff9c\010\uff9c\012\uff9c" +
    "\013\uff9c\022\uff9c\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\054\uff9c\055\uff9c\056\uff9c" +
    "\001\002\000\052\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\012\uffd4\013\uffd4\022\uffd4\025\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\054" +
    "\uffd4\055\uffd4\056\uffd4\001\002\000\024\005\uffc3\006\uffc3" +
    "\011\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\032\uffc3\044" +
    "\uffc3\001\002\000\024\005\065\006\060\011\075\014\076" +
    "\015\071\016\061\017\064\032\073\044\010\001\002\000" +
    "\024\005\065\006\060\011\075\014\076\015\071\016\061" +
    "\017\064\032\073\044\010\001\002\000\052\003\uffcb\004" +
    "\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb" +
    "\022\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\054\uffcb\055\uffcb\056\uffcb\001\002" +
    "\000\040\003\116\005\105\006\115\007\113\010\100\012" +
    "\107\013\102\025\111\026\104\027\112\030\114\031\120" +
    "\033\103\034\106\035\117\001\002\000\024\005\uffbd\006" +
    "\uffbd\011\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\032\uffbd" +
    "\044\uffbd\001\002\000\024\005\065\006\060\011\075\014" +
    "\076\015\071\016\061\017\064\032\073\044\010\001\002" +
    "\000\024\005\uffbb\006\uffbb\011\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\017\uffbb\032\uffbb\044\uffbb\001\002\000\024\005\uffc2" +
    "\006\uffc2\011\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\032" +
    "\uffc2\044\uffc2\001\002\000\024\005\uffc7\006\uffc7\011\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\032\uffc7\044\uffc7\001" +
    "\002\000\024\005\uffbf\006\uffbf\011\uffbf\014\uffbf\015\uffbf" +
    "\016\uffbf\017\uffbf\032\uffbf\044\uffbf\001\002\000\024\005" +
    "\uffc0\006\uffc0\011\uffc0\014\uffc0\015\uffc0\016\uffc0\017\uffc0" +
    "\032\uffc0\044\uffc0\001\002\000\052\003\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc\022\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\054\uffcc\055\uffcc\056\uffcc\001\002\000\024" +
    "\005\065\006\060\011\075\014\076\015\071\016\061\017" +
    "\064\032\073\044\010\001\002\000\024\005\uffc8\006\uffc8" +
    "\011\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8\032\uffc8\044" +
    "\uffc8\001\002\000\024\005\uffc5\006\uffc5\011\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\032\uffc5\044\uffc5\001\002\000" +
    "\024\005\uffbc\006\uffbc\011\uffbc\014\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\032\uffbc\044\uffbc\001\002\000\024\005\uffc6\006" +
    "\uffc6\011\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\032\uffc6" +
    "\044\uffc6\001\002\000\024\005\uffbe\006\uffbe\011\uffbe\014" +
    "\uffbe\015\uffbe\016\uffbe\017\uffbe\032\uffbe\044\uffbe\001\002" +
    "\000\052\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010" +
    "\uffd2\012\uffd2\013\uffd2\022\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\001\002\000\024\005\uffc1\006\uffc1\011\uffc1" +
    "\014\uffc1\015\uffc1\016\uffc1\017\uffc1\032\uffc1\044\uffc1\001" +
    "\002\000\024\005\uffc4\006\uffc4\011\uffc4\014\uffc4\015\uffc4" +
    "\016\uffc4\017\uffc4\032\uffc4\044\uffc4\001\002\000\024\005" +
    "\065\006\060\011\075\014\076\015\071\016\061\017\064" +
    "\032\073\044\010\001\002\000\052\003\116\004\uffce\005" +
    "\105\006\115\007\113\010\100\012\uffce\013\102\022\uffce" +
    "\025\111\026\104\027\112\030\114\031\120\033\103\034" +
    "\106\035\117\054\uffce\055\uffce\056\uffce\001\002\000\052" +
    "\003\116\004\uffcd\005\105\006\115\007\113\010\100\012" +
    "\uffcd\013\102\022\uffcd\025\111\026\104\027\112\030\114" +
    "\031\120\033\103\034\106\035\117\054\uffcd\055\uffcd\056" +
    "\uffcd\001\002\000\052\003\116\004\uffd0\005\105\006\115" +
    "\007\113\010\100\012\uffd0\013\102\022\uffd0\025\111\026" +
    "\104\027\112\030\114\031\120\033\103\034\106\035\117" +
    "\054\uffd0\055\uffd0\056\uffd0\001\002\000\052\003\116\004" +
    "\uffcf\005\105\006\115\007\113\010\100\012\uffcf\013\102" +
    "\022\uffcf\025\111\026\104\027\112\030\114\031\120\033" +
    "\103\034\106\035\117\054\uffcf\055\uffcf\056\uffcf\001\002" +
    "\000\052\003\116\004\uffd1\005\105\006\115\007\113\010" +
    "\100\012\uffd1\013\102\022\uffd1\025\111\026\104\027\112" +
    "\030\114\031\120\033\103\034\106\035\117\054\uffd1\055" +
    "\uffd1\056\uffd1\001\002\000\024\005\uffef\006\uffef\011\uffef" +
    "\014\uffef\015\uffef\016\uffef\017\uffef\032\uffef\044\uffef\001" +
    "\002\000\024\005\065\006\060\011\075\014\076\015\071" +
    "\016\061\017\064\032\073\044\010\001\002\000\024\005" +
    "\uffee\006\uffee\011\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\032\uffee\044\uffee\001\002\000\004\056\ufff2\001\002\000" +
    "\004\056\uffed\001\002\000\014\003\033\044\010\047\044" +
    "\050\ufff8\053\040\001\002\000\012\003\033\044\010\050" +
    "\ufff8\053\040\001\002\000\012\003\uffea\044\uffea\050\uffea" +
    "\053\uffea\001\002\000\012\003\uffec\044\uffec\050\uffec\053" +
    "\uffec\001\002\000\004\050\051\001\002\000\012\003\uffeb" +
    "\044\uffeb\050\uffeb\053\uffeb\001\002\000\004\050\143\001" +
    "\002\000\004\043\144\001\002\000\004\002\ufffb\001\002" +
    "\000\004\047\044\001\002\000\022\003\uffe0\020\uffe0\044" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002" +
    "\000\012\003\033\044\010\050\ufff8\053\040\001\002\000" +
    "\004\050\051\001\002\000\022\003\uffde\020\uffde\044\uffde" +
    "\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\001\002\000" +
    "\006\011\154\021\uffdc\001\002\000\004\021\174\001\002" +
    "\000\004\044\010\001\002\000\006\021\uffa3\022\uffa3\001" +
    "\002\000\006\021\165\022\164\001\002\000\004\012\163" +
    "\001\002\000\006\004\161\012\uffd9\001\002\000\004\044" +
    "\010\001\002\000\004\012\uffda\001\002\000\006\004\uffdd" +
    "\021\uffdd\001\002\000\004\044\010\001\002\000\012\036" +
    "\170\037\172\040\166\041\167\001\002\000\006\004\uffa2" +
    "\012\uffa2\001\002\000\006\004\uff9f\012\uff9f\001\002\000" +
    "\006\004\uffa1\012\uffa1\001\002\000\006\004\uffdb\012\uffdb" +
    "\001\002\000\006\004\uffa0\012\uffa0\001\002\000\006\021" +
    "\uffa4\022\uffa4\001\002\000\012\036\170\037\172\040\166" +
    "\041\167\001\002\000\004\004\176\001\002\000\006\020" +
    "\uffdf\047\uffdf\001\002\000\012\003\ufff7\044\ufff7\050\ufff7" +
    "\053\ufff7\001\002\000\004\042\232\001\002\000\026\003" +
    "\227\005\065\006\060\011\075\014\076\015\071\016\061" +
    "\017\064\032\073\044\010\001\002\000\026\003\uffab\005" +
    "\uffab\006\uffab\011\uffab\014\uffab\015\uffab\016\uffab\017\uffab" +
    "\032\uffab\044\uffab\001\002\000\004\042\224\001\002\000" +
    "\026\003\uffac\005\uffac\006\uffac\011\uffac\014\uffac\015\uffac" +
    "\016\uffac\017\uffac\032\uffac\044\uffac\001\002\000\004\042" +
    "\223\001\002\000\026\003\uffaf\005\uffaf\006\uffaf\011\uffaf" +
    "\014\uffaf\015\uffaf\016\uffaf\017\uffaf\032\uffaf\044\uffaf\001" +
    "\002\000\026\003\uffae\005\uffae\006\uffae\011\uffae\014\uffae" +
    "\015\uffae\016\uffae\017\uffae\032\uffae\044\uffae\001\002\000" +
    "\004\042\222\001\002\000\026\003\uffad\005\uffad\006\uffad" +
    "\011\uffad\014\uffad\015\uffad\016\uffad\017\uffad\032\uffad\044" +
    "\uffad\001\002\000\026\003\uffaa\005\uffaa\006\uffaa\011\uffaa" +
    "\014\uffaa\015\uffaa\016\uffaa\017\uffaa\032\uffaa\044\uffaa\001" +
    "\002\000\024\005\065\006\060\011\075\014\076\015\071" +
    "\016\061\017\064\032\073\044\010\001\002\000\042\003" +
    "\116\005\105\006\115\007\113\010\100\012\uffd7\013\102" +
    "\022\uffd7\025\111\026\104\027\112\030\114\031\120\033" +
    "\103\034\106\035\117\001\002\000\006\012\217\022\216" +
    "\001\002\000\024\005\065\006\060\011\075\014\076\015" +
    "\071\016\061\017\064\032\073\044\010\001\002\000\004" +
    "\004\220\001\002\000\012\003\uffd8\044\uffd8\050\uffd8\053" +
    "\uffd8\001\002\000\042\003\116\005\105\006\115\007\113" +
    "\010\100\012\uffd6\013\102\022\uffd6\025\111\026\104\027" +
    "\112\030\114\031\120\033\103\034\106\035\117\001\002" +
    "\000\026\003\uffa6\005\uffa6\006\uffa6\011\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\032\uffa6\044\uffa6\001\002\000\026" +
    "\003\uffa8\005\uffa8\006\uffa8\011\uffa8\014\uffa8\015\uffa8\016" +
    "\uffa8\017\uffa8\032\uffa8\044\uffa8\001\002\000\026\003\uffa5" +
    "\005\uffa5\006\uffa5\011\uffa5\014\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\032\uffa5\044\uffa5\001\002\000\004\004\231\001\002" +
    "\000\042\003\uffd3\004\uffd3\005\uffd3\006\uffd3\007\uffd3\010" +
    "\uffd3\011\213\013\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3" +
    "\031\uffd3\033\uffd3\034\uffd3\035\uffd3\001\002\000\012\003" +
    "\uffb0\044\uffb0\050\uffb0\053\uffb0\001\002\000\012\003\uffb1" +
    "\044\uffb1\050\uffb1\053\uffb1\001\002\000\012\003\uffb2\044" +
    "\uffb2\050\uffb2\053\uffb2\001\002\000\026\003\uffa7\005\uffa7" +
    "\006\uffa7\011\uffa7\014\uffa7\015\uffa7\016\uffa7\017\uffa7\032" +
    "\uffa7\044\uffa7\001\002\000\004\043\234\001\002\000\004" +
    "\002\ufffa\001\002\000\006\004\uffdc\011\154\001\002\000" +
    "\004\004\237\001\002\000\006\020\uffe2\047\uffe2\001\002" +
    "\000\004\004\uffb4\001\002\000\020\003\uffb6\044\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\001\002\000\006" +
    "\021\245\022\164\001\002\000\020\003\240\044\uffb8\047" +
    "\uffb8\050\uffb8\051\uffb8\052\uffb8\053\uffb8\001\002\000\020" +
    "\003\uffb7\044\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7\053" +
    "\uffb7\001\002\000\012\036\170\037\172\040\166\041\167" +
    "\001\002\000\004\004\247\001\002\000\020\003\uffb5\044" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\001\002" +
    "\000\004\004\251\001\002\000\020\003\uffb3\044\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\001\002\000\014" +
    "\003\033\044\010\047\030\050\ufff8\053\040\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\010\005\013\006\011\007\012\001\001\000\004" +
    "\052\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\010\022\012\026\013\033\014\040" +
    "\044\251\001\001\000\004\044\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\042\240\043\242\051\241" +
    "\052\154\001\001\000\004\006\017\001\001\000\034\004" +
    "\030\010\022\012\026\013\033\014\040\023\035\025\021" +
    "\026\024\027\041\052\023\056\034\061\036\062\031\001" +
    "\001\000\004\052\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\063\200\064\206\065\210\066\203\067" +
    "\201\070\211\001\001\000\016\023\035\027\176\052\023" +
    "\056\034\061\036\062\031\001\001\000\004\052\151\001" +
    "\001\000\004\044\144\001\001\000\022\023\035\025\141" +
    "\026\024\027\041\052\023\056\034\061\036\062\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\052\052\055\053\001\001\000\004" +
    "\044\042\001\001\000\002\001\001\000\006\015\044\021" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\023\035\025\046\026\024\027\041\052\023\056\034\061" +
    "\036\062\031\001\001\000\004\022\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\064\054\001\001\000\020\031\071\032\062" +
    "\034\067\037\073\040\061\052\065\057\066\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\107\035\100\036" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\127\001\001\000\014\031\071\032" +
    "\125\034\067\037\073\052\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\031\071\032" +
    "\124\034\067\037\073\052\065\001\001\000\014\031\071" +
    "\032\076\034\067\037\073\052\065\001\001\000\002\001" +
    "\001\000\010\033\107\035\100\036\120\001\001\000\002" +
    "\001\001\000\014\031\071\032\123\034\067\037\073\052" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\031\071\032\122\034\067\037\073\052\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\031\071\032" +
    "\121\034\067\037\073\052\065\001\001\000\010\033\107" +
    "\035\100\036\120\001\001\000\010\033\107\035\100\036" +
    "\120\001\001\000\010\033\107\035\100\036\120\001\001" +
    "\000\010\033\107\035\100\036\120\001\001\000\010\033" +
    "\107\035\100\036\120\001\001\000\002\001\001\000\020" +
    "\031\071\032\062\034\067\037\073\040\132\041\131\052" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\021\134\023\035\025\135\026\024\027" +
    "\041\052\023\053\136\056\034\061\036\062\031\001\001" +
    "\000\022\023\035\025\137\026\024\027\041\052\023\056" +
    "\034\061\036\062\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\011\145\021\146\001\001\000\002\001\001\000\022\023" +
    "\035\025\147\026\024\027\041\052\023\056\034\061\036" +
    "\062\031\001\001\000\004\022\150\001\001\000\002\001" +
    "\001\000\004\020\152\001\001\000\002\001\001\000\012" +
    "\016\157\017\156\051\155\052\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\016\157\017\161\051\155\052\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\052\172\001\001" +
    "\000\004\054\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\054\174\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\023\227\031\071\032\062\034\067\037\073\040" +
    "\224\052\225\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\024\214\031\071\032\213\034\067\037" +
    "\073\052\065\001\001\000\010\033\107\035\100\036\120" +
    "\001\001\000\002\001\001\000\014\031\071\032\220\034" +
    "\067\037\073\052\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\107\035\100\036\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\071\247\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\042\243\051\241\052" +
    "\154\001\001\000\002\001\001\000\004\054\245\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\004\252\023\035\025\021\026\024" +
    "\027\041\052\023\056\034\061\036\062\031\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
//@@CUPDBG2

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
  Type.buildTypes();
  SymbolTable.initialize();

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
//@@CUPDBG3
 return lexer.next_token(); 
    }

//@@CUPDBG0

  protected Lexer lexer;
  public static int errors = 0;
  public static StringBuffer code = new StringBuffer();

  public void report_error(String message, Object info){
    if (info instanceof String){
	  errors++;
      System.err.println("  "+ errors + "==> " + info + " "+ message +
							"near " + lexer.current_lexeme());
    } else {
      StringBuffer m = new StringBuffer("Error ");
      if (info instanceof java_cup.runtime.Symbol){
        m.append( "("+info.toString()+")" );
        m.append(" : "+message);
        System.err.println(m);
      }
    }
  }

  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

  public void checkEqualTypes(Type t1, Type t2){
    if (t1.equals(t2)){return;}
    report_error("Incompatible types. ", "ERROR");
  }

  public void checkCompatibleTypes(Type t1, Type t2){
    if (t1.equals(t2)){return;}
    if (t1.getVal().equals("integer") && t2.getVal().equals("real")){return;}
    if (t2.getVal().equals("integer") && t1.getVal().equals("real")){return;}
    report_error("Incompatible types ", "ERROR");
  }

  public Type checkRelationalExp(Type e1, Type e2, String op){
    if (op.equals("<>")){
      if (!(e1.equals(e2))){
        report_error("Incompatible types", "ERROR");
      }
    } else {
      checkCompatibleTypes(e1, e2);
    }
    return Type.getType("boolean");
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

//@@CUPDBG1

  class Exp {
    public Type type;
    public String code;
    public boolean isConstant;

    Exp(Type t, String code) {
      this(t, code, false);
    }

    Exp(Type t, String code, boolean cte) {
      type = t;
      this.code = code;
      isConstant = cte;
    }
  }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= initial EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // initial ::= program_def_part program_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program_def ::= type_def_part variable_def_part header_declarations body_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program_def ::= header_declarations variable_def_part body_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program_def_part ::= PROGRAM identifier SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program_def_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_def_part ::= TYPE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def_part",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // body_def_part ::= BEGIN stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // body_def_part ::= stmt_def_part END FULLSTOP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("body_def_part",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // stmt_def_part ::= stmt_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // stmt_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_part",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt_def_list ::= stmt_def_list stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt_def_list ::= stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_def_list",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= attr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= for_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= call 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // for_designator ::= FOR control_variable equal_op initial_value direction final_value 
            {
              Object RESULT =null;
		Location cvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location cvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		Object cv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location ivxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ivxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object iv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location fvxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location fvxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object fv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG4

	SymbolImpl symbolTableCV = SymbolTable.get(cv.toString());
	if (symbolTableCV == null) {
		parser.report_error("Undeclared variable ", "ERROR");
	}
	Exp exIV = (Exp)iv;
	Exp exFV = (Exp)fv;
	parser.checkEqualTypes(exIV.type, Type.getType("integer"));
	parser.checkEqualTypes(exFV.type, Type.getType("integer"));
	parser.checkEqualTypes(symbolTableCV.getType(), Type.getType("integer"));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_designator",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // control_variable ::= identifier 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG5

	RESULT = id.toString();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("control_variable",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // initial_value ::= exp_part 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG6

	Exp exp = (Exp)e;
	RESULT = exp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("initial_value",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // direction ::= TO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direction",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // direction ::= DOWNTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("direction",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // final_value ::= exp_part 
            {
              Object RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG7

	Exp exp = (Exp)e;
	RESULT = exp;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("final_value",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // for_def_part ::= for_designator DO for_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // for_stmt ::= block stmt_def_part block_end 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // for_stmt ::= stmt_def_part 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_stmt",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // for_def_part ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG8
parser.report_error("Error in for definition ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("for_def_part",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // identifier ::= IDENTIFIER 
            {
              String RESULT =null;
		Location xxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location xxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String x = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG9

	RESULT = x;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // header_declarations ::= header_declarations procedure_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // header_declarations ::= header_declarations function_def_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // block ::= BEGIN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // block_end ::= END SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block_end",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // procedure_def_part ::= procedure_declaration variable_def_part procedure_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_def_part",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // procedure_declaration ::= PROCEDURE identifier parameters_list SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG10

	ProcedureType p = new ProcedureType();
	List<Type> l = (List<Type>)pl; 
	p.addParams(l);
	if (! SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, p))){
		parser.report_error("Duplicate name ", "ERROR");
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_declaration",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // procedure_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("procedure_body",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // function_def_part ::= function_declaration variable_def_part function_body 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_def_part",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // function_declaration ::= FUNCTION identifier parameters_list COLON type_def SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG11

	Type returnType = (Type)td;
	FunctionType p = new FunctionType(returnType);
	List<Type> l = (List<Type>)pl; 
	p.addParams(l);
	if (! SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, p))){
		parser.report_error("Duplicate name ", "ERROR");
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_declaration",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // function_body ::= block stmt_def_part block_end 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_body",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameters_list ::= LPAREN parameters RPAREN 
            {
              Object RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG12

	RESULT = p;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameters_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter ::= identifier_list COLON type_def 
            {
              Object RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG13

	List<Type> params = new ArrayList();
	for (String i: il){
		params.add((Type)t);
		if(! SymbolTable.insert(i.toLowerCase(), new SymbolImpl(i, (Type)t))){
			parser.report_error("Duplicate name ", "ERROR");
		}
	}
    RESULT = params;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameter",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameters ::= parameter SEMI parameters 
            {
              Object RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location plxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location plxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG14

	List<Type> aux = (List)pl;
	aux.addAll((List<Type>)p);
	RESULT = aux;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameters ::= parameter 
            {
              Object RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG15

	RESULT = p;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("parameters",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // call ::= identifier LPAREN args RPAREN SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		Location alxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location alxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		//@@CUPDBG16

	SymbolImpl s = SymbolTable.get(id);	
	if (s == null) {
		parser.report_error("Undeclared function ", "ERROR");
	}
	List<Exp> arg_list = (List<Exp>)al;
	FunctionType f = (FunctionType)s.getType();
	for (int i=0; i < f.parameters.size(); i++){
		if (f.parameters.get(i) != arg_list.get(i).type){
			parser.report_error("Invalid parameter ", "ERROR");
		}
	}
	RESULT = f;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("call",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // args ::= exp 
            {
              Object RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG17

	List<Exp> a = new ArrayList();
	Exp e = (Exp)ex;
	a.add(e);
	RESULT = a;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // args ::= args COMMA exp 
            {
              Object RESULT =null;
		Location axleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location axright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG18

	Exp e = (Exp)ex;
	List<Exp> arg_list = (List<Exp>)a;
	arg_list.add(e);
	RESULT = arg_list;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_part ::= exp 
            {
              Object RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG19

	Exp e = (Exp)ex;
	RESULT = new Exp(e.type, e.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_part",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= literal 
            {
              Object RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG20

	Exp e;
    if (l instanceof Integer) {
		e = new Exp(Type.getType("integer"), String.valueOf(l));
	} else if (l instanceof Float){
		e = new Exp(Type.getType("real"), String.valueOf(l));
	} else if (l instanceof String) {
		e = new Exp(Type.getType("string"), String.valueOf(l));
	} else if (l instanceof Boolean) {
		e = new Exp(Type.getType("boolean"), String.valueOf(l));
	} else {
		parser.report_error("Unknown data type ", "ERROR");
		e = null;
	}
	RESULT = e;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= identifier 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG21

	RESULT = new Exp(SymbolTable.get(id).getType(), id);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp error 
            {
              Object RESULT =null;
		//@@CUPDBG22
 parser.report_error("Missing operand ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= bool_op exp 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG23

	Exp ex1 = (Exp)e1;
	parser.checkCompatibleTypes(ex1.type, Type.getType("boolean"));
	RESULT = new Exp(Type.getType("boolean"), (String)op + ex1.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp log_op exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG24

	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	parser.checkCompatibleTypes(ex1.type, Type.getType("boolean"));
	parser.checkCompatibleTypes(ex2.type, Type.getType("boolean"));
	RESULT = new Exp(Type.getType("boolean"), ex1.code + (String)op + ex2.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= un_arim_op exp 
            {
              Object RESULT =null;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG25

	Exp ex1 = (Exp)e1;
	parser.checkCompatibleTypes(ex1.type, Type.getType("integer"));
	RESULT = new Exp(ex1.type, (String)op + ex1.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= exp bin_arim_op exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG26

	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	parser.checkCompatibleTypes(ex1.type, ex2.type);
	RESULT = new Exp(Type.max(ex1.type, ex2.type), ex1.code + (String)op + ex2.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp rel_op exp 
            {
              Object RESULT =null;
		Location e1xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location e1xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location opxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location opxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		Location e2xleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location e2xright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG27

	Exp ex1 = (Exp)e1;
	Exp ex2 = (Exp)e2;
	RESULT = new Exp(parser.checkRelationalExp(ex1.type, ex2.type, (String)op), ex1.code + (String)op + ex2.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= LPAREN exp RPAREN 
            {
              Object RESULT =null;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG28

	Exp e = (Exp)ex;
	RESULT = new Exp(e.type, e.code);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // literal ::= INTEGER_LITERAL 
            {
              Object RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Integer il = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG29

	RESULT = il;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // literal ::= BOOLEAN_LITERAL 
            {
              Object RESULT =null;
		Location blxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location blxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG30

	RESULT = bl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= STRING_LITERAL 
            {
              Object RESULT =null;
		Location slxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location slxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String sl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG31

	RESULT = sl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // rel_op ::= GT 
            {
              Object RESULT =null;
		//@@CUPDBG32

    RESULT = ">";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // rel_op ::= LT 
            {
              Object RESULT =null;
		//@@CUPDBG33

    RESULT = "<";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // rel_op ::= GE 
            {
              Object RESULT =null;
		//@@CUPDBG34

    RESULT = ">=";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // rel_op ::= LE 
            {
              Object RESULT =null;
		//@@CUPDBG35

    RESULT = "<=";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // rel_op ::= DIFF 
            {
              Object RESULT =null;
		//@@CUPDBG36

    RESULT = "<>";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("rel_op",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // bool_op ::= NOT 
            {
              Object RESULT =null;
		//@@CUPDBG37

    RESULT = "not";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_op",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // log_op ::= AND 
            {
              Object RESULT =null;
		//@@CUPDBG38

    RESULT = "and";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // log_op ::= XOR 
            {
              Object RESULT =null;
		//@@CUPDBG39

    RESULT = "xor";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // log_op ::= OR 
            {
              Object RESULT =null;
		//@@CUPDBG40

    RESULT = "or";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("log_op",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bin_arim_op ::= PLUS 
            {
              Object RESULT =null;
		//@@CUPDBG41

    RESULT = "+";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bin_arim_op ::= MINUS 
            {
              Object RESULT =null;
		//@@CUPDBG42

    RESULT = "-";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bin_arim_op ::= TIMES 
            {
              Object RESULT =null;
		//@@CUPDBG43

    RESULT = "*";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bin_arim_op ::= DIVIDE 
            {
              Object RESULT =null;
		//@@CUPDBG44

    RESULT = "/";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bin_arim_op ::= MOD 
            {
              Object RESULT =null;
		//@@CUPDBG45

    RESULT = "mod";

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bin_arim_op",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // un_arim_op ::= PLUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // un_arim_op ::= MINUS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("un_arim_op",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // variable_def_part ::= VAR variable_def_list 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // variable_def_list ::= variable_def_list variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // variable_def_list ::= variable_def 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_list",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // variable_def ::= identifier_list COLON type_def SEMI 
            {
              Object RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location tdxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location tdxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG46

	for (String id: il){
		if(!SymbolTable.insert(id.toLowerCase(), new SymbolImpl(id, (Type)td))) {
	        parser.report_error("Duplicated variable ", id);
	    }
	}

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$0 ::= 
            {
              Object RESULT =null;
//@@CUPDBG47
 parser.report_error("","expected ';' before token"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // variable_def ::= error NT$0 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // attr ::= identifier assign_operator exp_part SEMI 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		Location exxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xleft;
		Location exxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).xright;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		//@@CUPDBG48

	Exp e = (Exp)ex;
    parser.checkCompatibleTypes(SymbolTable.get(id).getType(), e.type);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // attr ::= identifier assign_operator call 
            {
              Object RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG49

	SymbolImpl s = SymbolTable.get(id.toLowerCase());
	if (s == null) {
		parser.report_error("Undeclared variable ", "ERROR");
	}
	FunctionType f = (FunctionType)c;
	parser.checkCompatibleTypes(s.getType(), f.returnType);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // attr ::= identifier assign_operator error 
            {
              Object RESULT =null;
		//@@CUPDBG50
 parser.report_error("Error in expression ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("attr",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // assign_operator ::= error 
            {
              Object RESULT =null;
		//@@CUPDBG51
 parser.report_error("Expected symbol before = ", "ERROR"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // assign_operator ::= equal_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // assign_operator ::= sum_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // assign_operator ::= minus_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // assign_operator ::= times_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // assign_operator ::= divide_op 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_operator",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // equal_op ::= COLON EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("equal_op",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sum_op ::= PLUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sum_op",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // minus_op ::= MINUS EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("minus_op",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // times_op ::= TIMES EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("times_op",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // divide_op ::= DIVIDE EQUAL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("divide_op",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // identifier_list ::= identifier_list COMMA identifier 
            {
              List<String> RESULT =null;
		Location ilxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xleft;
		Location ilxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).xright;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG52

	il.add(id.toLowerCase());
	RESULT = il;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // identifier_list ::= identifier 
            {
              List<String> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG53

	List<String> il = new ArrayList<String>();
   	il.add(id.toLowerCase());
   	RESULT = il;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("identifier_list",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // type_def ::= STRING 
            {
              Object RESULT =null;
		//@@CUPDBG54

	RESULT = Type.getType("string");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // type_def ::= BOOL 
            {
              Object RESULT =null;
		//@@CUPDBG55

	RESULT = Type.getType("boolean");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // type_def ::= INT 
            {
              Object RESULT =null;
		//@@CUPDBG56

	RESULT = Type.getType("integer");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // type_def ::= REAL 
            {
              Object RESULT =null;
		//@@CUPDBG57

	RESULT = Type.getType("real");

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_def",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // header_declarations ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("header_declarations",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // variable_def_part ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variable_def_part",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		Location rlxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location rlxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float rl = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG58

	RESULT = rl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // literal ::= FLOAT_LITERAL 
            {
              Object RESULT =null;
		Location flxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xleft;
		Location flxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$Parser$stack.peek()).xright;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		//@@CUPDBG59

	RESULT = fl;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("literal",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
